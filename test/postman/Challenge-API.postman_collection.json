{
	"info": {
		"_postman_id": "2fbaab29-3ca0-4092-99de-2e704013a771",
		"name": "Challenge-API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "ChallengeTypes",
			"item": [
				{
					"name": "create challengeType",
					"item": [
						{
							"name": "create challengeType by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(pm.response.status === \"Created\"){",
											"        const response = pm.response.json()",
											"        pm.expect(response.name).to.eq(iterationData.get('name'))",
											"        pm.expect(response.description).to.eq(iterationData.get('description'))",
											"        pm.expect(response.isActive).to.eq(iterationData.get('isActive'))",
											"        pm.expect(response.isTask).to.eq(iterationData.get('isTask'))",
											"        pm.expect(response.abbreviation).to.eq(iterationData.get('abbreviation'))",
											"        pm.environment.set(\"CHALLENGE_TYPE_ID\", response.id);",
											"        if(pm.info.iteration === 0) {",
											"          pm.environment.unset(\"CHALLENGE_TYPE_ID_2\")",
											"          pm.environment.unset(\"CHALLENGE_TYPE_ID_3\")",
											"        }",
											"        if(!pm.environment.get(\"CHALLENGE_TYPE_ID_2\")) {",
											"            pm.environment.set(\"CHALLENGE_TYPE_ID_2\", response.id);",
											"        }else if(!pm.environment.get(\"CHALLENGE_TYPE_ID_3\")) {",
											"            pm.environment.set(\"CHALLENGE_TYPE_ID_3\", response.id);",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"isTask\": {{isTask}},\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengeType by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengeType by invalid bearer format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "invalid {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengeType by error field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"isTask\": {{isTask}},\n    \"abbreviation\": \"{{abbreviation}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengeType by invalid field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"isTask\": {{isTask}},\n    \"abbreviation\": \"{{abbreviation}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengeType by invalid field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": null,\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"isTask\": {{isTask}},\n    \"abbreviation\": \"{{abbreviation}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengeType by invalid field 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"isTask\": {{isTask}},\n    \"abbreviation\": null\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengeType by invalid field 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": null,\n    \"isActive\": {{isActive}},\n    \"isTask\": {{isTask}},\n    \"abbreviation\": \"{{abbreviation}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengeType by missing field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"isTask\": {{isTask}},\n    \"abbreviation\": \"{{abbreviation}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengeType by missing field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isTask\": {{isTask}},\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengeType by missing field 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"isTask\": {{isTask}}\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengeType by unexpected field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"isTask\": {{isTask}},\n    \"abbreviation\": \"{{abbreviation}}\",\n    \"other\": \"{{other}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get challengeTypes",
					"item": [
						{
							"name": "get challengeType - id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
											"    pm.expect(response.isActive).to.eq(iterationData.get('isActive'))",
											"    pm.expect(response.isTask).to.eq(iterationData.get('isTask'))",
											"    pm.expect(response.abbreviation).to.eq(iterationData.get('abbreviation'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-types/{{CHALLENGE_TYPE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types",
										"{{CHALLENGE_TYPE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challengeType by invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-types/{{testId}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types",
										"{{testId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challengeType - all",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.eq(iterationData.get('length'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-types",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "search challengeTypes",
					"item": [
						{
							"name": "search challengeType successfully 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(pm.response.headers.get('X-Page')).to.eq(iterationData.get('page'))",
											"    pm.expect(pm.response.headers.get('X-Per-Page')).to.eq(iterationData.get('perPage'))",
											"    pm.expect(pm.response.headers.get('X-Total')).to.eq(iterationData.get('total'))",
											"    pm.expect(response.length).to.eq(1)",
											"    pm.expect(response[0].name).to.eq(iterationData.get('name'))",
											"    pm.expect(response[0].description).to.eq(iterationData.get('description'))",
											"    pm.expect(response[0].isActive).to.eq(iterationData.get('isActive'))",
											"    pm.expect(response[0].isTask).to.eq(iterationData.get('isTask'))",
											"    pm.expect(response[0].abbreviation).to.eq(iterationData.get('abbreviation'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-types?name={{name}}&description={{description}}&isActive={{isActive}}&abbreviation={{abbreviation}}&isTask={{isTask}}&page={{page}}&perPage={{perPage}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types"
									],
									"query": [
										{
											"key": "name",
											"value": "{{name}}"
										},
										{
											"key": "description",
											"value": "{{description}}"
										},
										{
											"key": "isActive",
											"value": "{{isActive}}"
										},
										{
											"key": "abbreviation",
											"value": "{{abbreviation}}"
										},
										{
											"key": "isTask",
											"value": "{{isTask}}"
										},
										{
											"key": "page",
											"value": "{{page}}"
										},
										{
											"key": "perPage",
											"value": "{{perPage}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challengeType successfully 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(pm.response.headers.get('X-Page')).to.eq(iterationData.get('page'))",
											"    pm.expect(pm.response.headers.get('X-Per-Page')).to.eq(iterationData.get('perPage'))",
											"    pm.expect(pm.response.headers.get('X-Total')).to.eq(iterationData.get('total'))",
											"    pm.expect(response.length).to.eq(1)",
											"    pm.expect(response[0].name).to.eq(iterationData.get('name'))",
											"    pm.expect(response[0].description).to.eq(iterationData.get('description'))",
											"    pm.expect(response[0].isActive).to.eq(iterationData.get('isActive'))",
											"    pm.expect(response[0].isTask).to.eq(iterationData.get('isTask'))",
											"    pm.expect(response[0].abbreviation).to.eq(iterationData.get('abbreviation'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-types?{{paramKey}}={{paramValue}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types"
									],
									"query": [
										{
											"key": "{{paramKey}}",
											"value": "{{paramValue}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challengeType by invalid parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-types?{{paramKey}}={{paramValue}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types"
									],
									"query": [
										{
											"key": "{{paramKey}}",
											"value": "{{paramValue}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "fully update challengeType",
					"item": [
						{
							"name": "fully update challengeType by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
											"    pm.expect(response.isActive).to.eq(iterationData.get('isActive'))",
											"    pm.expect(response.isTask).to.eq(iterationData.get('isTask'))",
											"    pm.expect(response.abbreviation).to.eq(iterationData.get('abbreviation'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"isTask\": {{isTask}},\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-types/{{CHALLENGE_TYPE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types",
										"{{CHALLENGE_TYPE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengeType by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-types/{{CHALLENGE_TYPE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types",
										"{{CHALLENGE_TYPE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengeType by invalid bearer format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "invalid {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-types/{{CHALLENGE_TYPE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types",
										"{{CHALLENGE_TYPE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengeType by invalid Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"isTask\": {{isTask}},\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-types/{{testId}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types",
										"{{testId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengeType by error field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"isTask\": {{isTask}},\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-types/{{CHALLENGE_TYPE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types",
										"{{CHALLENGE_TYPE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengeType by invalid field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"isTask\": {{isTask}},\n    \"abbreviation\": \"{{abbreviation}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-types/{{CHALLENGE_TYPE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types",
										"{{CHALLENGE_TYPE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengeType by invalid field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": null,\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"isTask\": {{isTask}},\n    \"abbreviation\": \"{{abbreviation}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-types/{{CHALLENGE_TYPE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types",
										"{{CHALLENGE_TYPE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengeType by invalid field 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"isTask\": {{isTask}},\n    \"abbreviation\": null\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-types/{{CHALLENGE_TYPE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types",
										"{{CHALLENGE_TYPE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengeType by invalid field 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": null,\n    \"isActive\": {{isActive}},\n    \"isTask\": {{isTask}},\n    \"abbreviation\": \"{{abbreviation}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-types/{{CHALLENGE_TYPE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types",
										"{{CHALLENGE_TYPE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengeType by missing field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"isTask\": {{isTask}},\n    \"abbreviation\": \"{{abbreviation}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-types/{{CHALLENGE_TYPE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types",
										"{{CHALLENGE_TYPE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengeType by missing field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isTask\": {{isTask}},\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-types/{{CHALLENGE_TYPE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types",
										"{{CHALLENGE_TYPE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengeType by missing field 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"isTask\": {{isTask}}\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-types/{{CHALLENGE_TYPE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types",
										"{{CHALLENGE_TYPE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengeType by unexpected field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"isTask\": {{isTask}},\n    \"abbreviation\": \"{{abbreviation}}\",\n    \"other\": \"{{other}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-types/{{CHALLENGE_TYPE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types",
										"{{CHALLENGE_TYPE_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "partially update challengeType",
					"item": [
						{
							"name": "partially update challengeType by admin 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
											"    pm.expect(response.isActive).to.eq(iterationData.get('isActive'))",
											"    pm.expect(response.isTask).to.eq(iterationData.get('isTask'))",
											"    pm.expect(response.abbreviation).to.eq(iterationData.get('abbreviation'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-types/{{CHALLENGE_TYPE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types",
										"{{CHALLENGE_TYPE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challengeType by admin 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
											"    pm.expect(response.isActive).to.eq(iterationData.get('isActive'))",
											"    pm.expect(response.isTask).to.eq(iterationData.get('isTask'))",
											"    pm.expect(response.abbreviation).to.eq(iterationData.get('abbreviation'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-types/{{CHALLENGE_TYPE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types",
										"{{CHALLENGE_TYPE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challengeType by admin 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
											"    pm.expect(response.isActive).to.eq(iterationData.get('isActive'))",
											"    pm.expect(response.isTask).to.eq(iterationData.get('isTask'))",
											"    pm.expect(response.abbreviation).to.eq(iterationData.get('abbreviation'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"{{description}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-types/{{CHALLENGE_TYPE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types",
										"{{CHALLENGE_TYPE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challengeType by admin 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
											"    pm.expect(response.isActive).to.eq(iterationData.get('isActive'))",
											"    pm.expect(response.isTask).to.eq(iterationData.get('isTask'))",
											"    pm.expect(response.abbreviation).to.eq(iterationData.get('abbreviation'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isActive\": {{isActive}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-types/{{CHALLENGE_TYPE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types",
										"{{CHALLENGE_TYPE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challengeType by admin 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
											"    pm.expect(response.isActive).to.eq(iterationData.get('isActive'))",
											"    pm.expect(response.isTask).to.eq(iterationData.get('isTask'))",
											"    pm.expect(response.abbreviation).to.eq(iterationData.get('abbreviation'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isTask\": {{isTask}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-types/{{CHALLENGE_TYPE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types",
										"{{CHALLENGE_TYPE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challengeType by admin 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
											"    pm.expect(response.isActive).to.eq(iterationData.get('isActive'))",
											"    pm.expect(response.isTask).to.eq(iterationData.get('isTask'))",
											"    pm.expect(response.abbreviation).to.eq(iterationData.get('abbreviation'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"isTask\": {{isTask}},\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-types/{{CHALLENGE_TYPE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types",
										"{{CHALLENGE_TYPE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challengeType by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-types/{{CHALLENGE_TYPE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types",
										"{{CHALLENGE_TYPE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challengeType by invalid bearer format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "invalid {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-types/{{CHALLENGE_TYPE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types",
										"{{CHALLENGE_TYPE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challengeType by invalid Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"isTask\": {{isTask}},\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-types/{{testId}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types",
										"{{testId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challengeType by error field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"isTask\": {{isTask}},\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-types/{{CHALLENGE_TYPE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types",
										"{{CHALLENGE_TYPE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challengeType by invalid field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"isTask\": {{isTask}},\n    \"abbreviation\": \"{{abbreviation}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-types/{{CHALLENGE_TYPE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types",
										"{{CHALLENGE_TYPE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challengeType by invalid field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": null,\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"isTask\": {{isTask}},\n    \"abbreviation\": \"{{abbreviation}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-types/{{CHALLENGE_TYPE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types",
										"{{CHALLENGE_TYPE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challengeType by invalid field 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"isTask\": {{isTask}},\n    \"abbreviation\": null\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-types/{{CHALLENGE_TYPE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types",
										"{{CHALLENGE_TYPE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challengeType by invalid field 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": null,\n    \"isActive\": {{isActive}},\n    \"isTask\": {{isTask}},\n    \"abbreviation\": \"{{abbreviation}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-types/{{CHALLENGE_TYPE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types",
										"{{CHALLENGE_TYPE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challengeType by unexpected field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"other\": \"{{other}}\"\n}\n"
								},
								"url": {
									"raw": "{{URL}}/challenge-types/{{CHALLENGE_TYPE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-types",
										"{{CHALLENGE_TYPE_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "ChallengeTracks",
			"item": [
				{
					"name": "create challengeTrack",
					"item": [
						{
							"name": "create challengeTrack by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(pm.response.status === \"Created\"){",
											"        const response = pm.response.json()",
											"        pm.environment.set(\"CHALLENGE_TRACK_ID\", response.id);",
											"        pm.expect(response.name).to.eq(iterationData.get('name'))",
											"        pm.expect(response.description).to.eq(iterationData.get('description'))",
											"        pm.expect(response.isActive).to.eq(iterationData.get('isActive'))",
											"        pm.expect(response.legacyId).to.eq(iterationData.get('legacyId'))",
											"        pm.expect(response.type).to.eq(iterationData.get('type'))",
											"        pm.expect(response.abbreviation).to.eq(iterationData.get('abbreviation'))",
											"        if(pm.info.iteration === 0) {",
											"          pm.environment.unset(\"CHALLENGE_TRACK_ID_2\")",
											"          pm.environment.unset(\"CHALLENGE_TRACK_ID_3\")",
											"          pm.environment.unset(\"CHALLENGE_TRACK_ID_4\")",
											"        }",
											"        if(!pm.environment.get(\"CHALLENGE_TRACK_ID_2\")) {",
											"            pm.environment.set(\"CHALLENGE_TRACK_ID_2\", response.id);",
											"        }else if(!pm.environment.get(\"CHALLENGE_TRACK_ID_3\")) {",
											"            pm.environment.set(\"CHALLENGE_TRACK_ID_3\", response.id);",
											"        }else if(!pm.environment.get(\"CHALLENGE_TRACK_ID_4\")) {",
											"            pm.environment.set(\"CHALLENGE_TRACK_ID_4\", response.id);",
											"        }",
											"    }",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"track\": \"{{track}}\",\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengeTrack by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengeTrack by invalid bearer format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "invalid {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengeTrack by error field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"track\": \"{{track}}\",\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengeTrack by invalid field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"track\": \"{{track}}\",\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengeTrack by invalid field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": null,\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"track\": \"{{track}}\",\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengeTrack by invalid field 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": null,\n    \"isActive\": {{isActive}},\n    \"track\": \"{{track}}\",\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengeTrack by invalid field 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"track\": \"{{track}}\",\n    \"abbreviation\": null\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengeTrack by invalid field 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"track\": null,\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengeTrack by missing field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"track\": \"{{track}}\",\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengeTrack by missing field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"track\": \"{{track}}\",\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengeTrack by missing field 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"track\": \"{{track}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengeTrack by unexpected field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"track\": \"{{track}}\",\n    \"abbreviation\": \"{{abbreviation}}\",\n    \"other\": \"{{other}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "get challengeTracks",
					"item": [
						{
							"name": "get challengeTrack - id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
											"    pm.expect(response.isActive).to.eq(iterationData.get('isActive'))",
											"    pm.expect(response.abbreviation).to.eq(iterationData.get('abbreviation'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks/{{CHALLENGE_TRACK_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks",
										"{{CHALLENGE_TRACK_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challengeTrack by invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks/{{testId}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks",
										"{{testId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challengeTrack - all",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.eq(iterationData.get('length'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "search challengeTracks",
					"item": [
						{
							"name": "search challengeTrack successfully 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(pm.response.headers.get('X-Page')).to.eq(iterationData.get('page'))",
											"    pm.expect(pm.response.headers.get('X-Per-Page')).to.eq(iterationData.get('perPage'))",
											"    pm.expect(pm.response.headers.get('X-Total')).to.eq(iterationData.get('total'))",
											"    pm.expect(response.length).to.eq(1)",
											"    pm.expect(response[0].name).to.eq(iterationData.get('name'))",
											"    pm.expect(response[0].description).to.eq(iterationData.get('description'))",
											"    pm.expect(response[0].isActive).to.eq(iterationData.get('isActive'))",
											"    pm.expect(response[0].abbreviation).to.eq(iterationData.get('abbreviation'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks?name={{name}}&description={{description}}&isActive={{isActive}}&abbreviation={{abbreviation}}&page={{page}}&perPage={{perPage}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks"
									],
									"query": [
										{
											"key": "name",
											"value": "{{name}}"
										},
										{
											"key": "description",
											"value": "{{description}}"
										},
										{
											"key": "isActive",
											"value": "{{isActive}}"
										},
										{
											"key": "abbreviation",
											"value": "{{abbreviation}}"
										},
										{
											"key": "page",
											"value": "{{page}}"
										},
										{
											"key": "perPage",
											"value": "{{perPage}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challengeTrack successfully 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(pm.response.headers.get('X-Page')).to.eq(iterationData.get('page'))",
											"    pm.expect(pm.response.headers.get('X-Per-Page')).to.eq(iterationData.get('perPage'))",
											"    pm.expect(pm.response.headers.get('X-Total')).to.eq(iterationData.get('total'))",
											"    pm.expect(response.length).to.eq(1)",
											"    pm.expect(response[0].name).to.eq(iterationData.get('name'))",
											"    pm.expect(response[0].description).to.eq(iterationData.get('description'))",
											"    pm.expect(response[0].isActive).to.eq(iterationData.get('isActive'))",
											"    pm.expect(response[0].isTask).to.eq(iterationData.get('isTask'))",
											"    pm.expect(response[0].abbreviation).to.eq(iterationData.get('abbreviation'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks?{{paramKey}}={{paramValue}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks"
									],
									"query": [
										{
											"key": "{{paramKey}}",
											"value": "{{paramValue}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challengeTrack by invalid parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks?{{paramKey}}={{paramValue}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks"
									],
									"query": [
										{
											"key": "{{paramKey}}",
											"value": "{{paramValue}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "fully update challengeTrack",
					"item": [
						{
							"name": "fully update challengeTrack by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
											"    pm.expect(response.isActive).to.eq(iterationData.get('isActive'))",
											"    pm.expect(response.legacyId).to.eq(iterationData.get('legacyId'))",
											"    pm.expect(response.abbreviation).to.eq(iterationData.get('abbreviation'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"legacyId\": {{legacyId}},\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks/{{CHALLENGE_TRACK_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks",
										"{{CHALLENGE_TRACK_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengeTrack by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks/{{CHALLENGE_TRACK_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks",
										"{{CHALLENGE_TRACK_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengeTrack by invalid bearer format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "invalid {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks/{{CHALLENGE_TRACK_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks",
										"{{CHALLENGE_TRACK_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengeTrack by invalid Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"legacyId\": {{legacyId}},\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks/{{testId}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks",
										"{{testId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengeTrack by error field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"legacyId\": {{legacyId}},\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks/{{CHALLENGE_TRACK_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks",
										"{{CHALLENGE_TRACK_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengeTrack by invalid field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"track\": \"{{track}}\",\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks/{{CHALLENGE_TRACK_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks",
										"{{CHALLENGE_TRACK_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengeTrack by invalid field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": null,\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"track\": \"{{track}}\",\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks/{{CHALLENGE_TRACK_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks",
										"{{CHALLENGE_TRACK_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengeTrack by invalid field 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": null,\n    \"isActive\": {{isActive}},\n    \"track\": \"{{track}}\",\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks/{{CHALLENGE_TRACK_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks",
										"{{CHALLENGE_TRACK_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengeTrack by invalid field 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"track\": \"{{track}}\",\n    \"abbreviation\": null\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks/{{CHALLENGE_TRACK_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks",
										"{{CHALLENGE_TRACK_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengeTrack by invalid field 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"track\": null,\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks/{{CHALLENGE_TRACK_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks",
										"{{CHALLENGE_TRACK_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengeTrack by missing field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"track\": \"{{track}}\",\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks/{{CHALLENGE_TRACK_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks",
										"{{CHALLENGE_TRACK_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengeTrack by missing field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"track\": \"{{track}}\",\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks/{{CHALLENGE_TRACK_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks",
										"{{CHALLENGE_TRACK_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengeTrack by missing field 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"track\": \"{{track}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks/{{CHALLENGE_TRACK_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks",
										"{{CHALLENGE_TRACK_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengeTrack by unexpected field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"track\": \"{{track}}\",\n    \"abbreviation\": \"{{abbreviation}}\",\n    \"other\": \"{{other}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks/{{CHALLENGE_TRACK_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks",
										"{{CHALLENGE_TRACK_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "partially update challengeTrack",
					"item": [
						{
							"name": "partially update challengeTrack by admin 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
											"    pm.expect(response.isActive).to.eq(iterationData.get('isActive'))",
											"    pm.expect(response.abbreviation).to.eq(iterationData.get('abbreviation'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isActive\": {{isActive}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks/{{CHALLENGE_TRACK_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks",
										"{{CHALLENGE_TRACK_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challengeTrack by admin 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
											"    pm.expect(response.isActive).to.eq(iterationData.get('isActive'))",
											"    pm.expect(response.abbreviation).to.eq(iterationData.get('abbreviation'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks/{{CHALLENGE_TRACK_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks",
										"{{CHALLENGE_TRACK_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challengeTrack by admin 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
											"    pm.expect(response.isActive).to.eq(iterationData.get('isActive'))",
											"    pm.expect(response.abbreviation).to.eq(iterationData.get('abbreviation'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"{{description}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks/{{CHALLENGE_TRACK_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks",
										"{{CHALLENGE_TRACK_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challengeTrack by admin 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
											"    pm.expect(response.isActive).to.eq(iterationData.get('isActive'))",
											"    pm.expect(response.abbreviation).to.eq(iterationData.get('abbreviation'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks/{{CHALLENGE_TRACK_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks",
										"{{CHALLENGE_TRACK_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challengeTrack by admin 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
											"    pm.expect(response.isActive).to.eq(iterationData.get('isActive'))",
											"    pm.expect(response.abbreviation).to.eq(iterationData.get('abbreviation'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks/{{CHALLENGE_TRACK_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks",
										"{{CHALLENGE_TRACK_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challengeTrack by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks/{{CHALLENGE_TRACK_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks",
										"{{CHALLENGE_TRACK_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challengeTrack by invalid bearer format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "invalid {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks/{{CHALLENGE_TRACK_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks",
										"{{CHALLENGE_TRACK_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challengeTrack by invalid Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"legacyId\": {{legacyId}},\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks/{{testId}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks",
										"{{testId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challengeTrack by error field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"legacyId\": {{legacyId}},\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks/{{CHALLENGE_TRACK_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks",
										"{{CHALLENGE_TRACK_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challengeTrack by invalid field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"track\": \"{{track}}\",\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks/{{CHALLENGE_TRACK_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks",
										"{{CHALLENGE_TRACK_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challengeTrack by invalid field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": null,\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"track\": \"{{track}}\",\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks/{{CHALLENGE_TRACK_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks",
										"{{CHALLENGE_TRACK_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challengeTrack by invalid field 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": null,\n    \"isActive\": {{isActive}},\n    \"track\": \"{{track}}\",\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks/{{CHALLENGE_TRACK_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks",
										"{{CHALLENGE_TRACK_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challengeTrack by invalid field 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"track\": \"{{track}}\",\n    \"abbreviation\": null\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks/{{CHALLENGE_TRACK_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks",
										"{{CHALLENGE_TRACK_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challengeTrack by invalid field 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"track\": null,\n    \"abbreviation\": \"{{abbreviation}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks/{{CHALLENGE_TRACK_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks",
										"{{CHALLENGE_TRACK_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challengeTrack by unexpected field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"track\": \"{{track}}\",\n    \"abbreviation\": \"{{abbreviation}}\",\n    \"other\": \"{{other}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-tracks/{{CHALLENGE_TRACK_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-tracks",
										"{{CHALLENGE_TRACK_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "ChallengePhases",
			"item": [
				{
					"name": "create challengePhase",
					"item": [
						{
							"name": "create challengePhase by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(pm.response.status === \"Created\"){",
											"        const response = pm.response.json()",
											"        pm.environment.set(\"CHALLENGE_PHASE_ID\", response.id);",
											"        pm.expect(response.name).to.eq(iterationData.get('name'))",
											"        pm.expect(response.description).to.eq(iterationData.get('description'))",
											"        pm.expect(response.isOpen).to.eq(iterationData.get('isOpen'))",
											"        pm.expect(response.duration).to.eq(iterationData.get('duration'))",
											"        if(pm.info.iteration === 0) {",
											"          pm.environment.unset(\"CHALLENGE_PHASE_ID_2\")",
											"          pm.environment.unset(\"CHALLENGE_PHASE_ID_3\")",
											"          pm.environment.unset(\"CHALLENGE_PHASE_ID_4\")",
											"          pm.environment.unset(\"CHALLENGE_PHASE_ID_5\")",
											"          pm.environment.unset(\"CHALLENGE_PHASE_ID_6\")",
											"        }",
											"        if(!pm.environment.get(\"CHALLENGE_PHASE_ID_2\")) {",
											"            pm.environment.set(\"CHALLENGE_PHASE_ID_2\", response.id);",
											"        } else if(!pm.environment.get(\"CHALLENGE_PHASE_ID_3\")) {",
											"            pm.environment.set(\"CHALLENGE_PHASE_ID_3\", response.id);",
											"        } else if(!pm.environment.get(\"CHALLENGE_PHASE_ID_4\")) {",
											"            pm.environment.set(\"CHALLENGE_PHASE_ID_4\", response.id);",
											"        } else if(!pm.environment.get(\"CHALLENGE_PHASE_ID_5\")) {",
											"            pm.environment.set(\"CHALLENGE_PHASE_ID_5\", response.id);",
											"        } else if(!pm.environment.get(\"CHALLENGE_PHASE_ID_6\")) {",
											"            pm.environment.set(\"CHALLENGE_PHASE_ID_6\", response.id);",
											"        }",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isOpen\": {{isOpen}},\n    \"duration\": {{duration}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengePhase by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengePhase by invalid bearer format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "invalid {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengePhase by error field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isOpen\": {{isOpen}},\n    \"duration\": {{duration}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengePhase by invalid field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isOpen\": {{isOpen}},\n    \"duration\": {{duration}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengePhase by invalid field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": null,\n    \"description\": \"{{description}}\",\n    \"isOpen\": {{isOpen}},\n    \"duration\": {{duration}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengePhase by invalid field 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": null,\n    \"isOpen\": {{isOpen}},\n    \"duration\": {{duration}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengePhase by missing field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"{{description}}\",\n    \"isOpen\": {{isOpen}},\n    \"duration\": {{duration}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengePhase by missing field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"duration\": {{duration}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengePhase by missing field 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isOpen\": {{isOpen}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengePhase by unexpected field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isOpen\": {{isOpen}},\n    \"duration\": {{duration}},\n    \"other\": \"{{other}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "get challengePhase",
					"item": [
						{
							"name": "get challengePhase - id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
											"    pm.expect(response.isOpen).to.eq(iterationData.get('isOpen'))",
											"    pm.expect(response.duration).to.eq(iterationData.get('duration'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{CHALLENGE_PHASE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{CHALLENGE_PHASE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challengePhase by invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{testId}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{testId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challengePhase by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{CHALLENGE_PHASE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{CHALLENGE_PHASE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challengePhase - all",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.eq(iterationData.get('length'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "search challengePhase",
					"item": [
						{
							"name": "search challengePhase successfully 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(pm.response.headers.get('X-Page')).to.eq(iterationData.get('page'))",
											"    pm.expect(pm.response.headers.get('X-Per-Page')).to.eq(iterationData.get('perPage'))",
											"    pm.expect(pm.response.headers.get('X-Total')).to.eq(iterationData.get('total'))",
											"    pm.expect(response.length).to.eq(1)",
											"    pm.expect(response[0].name).to.eq(iterationData.get('name'))",
											"    pm.expect(response[0].description).to.eq(iterationData.get('description'))",
											"    pm.expect(response[0].isActive).to.eq(iterationData.get('isActive'))",
											"    pm.expect(response[0].abbreviation).to.eq(iterationData.get('abbreviation'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-phases?name={{name}}&page={{page}}&perPage={{perPage}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									],
									"query": [
										{
											"key": "name",
											"value": "{{name}}"
										},
										{
											"key": "page",
											"value": "{{page}}"
										},
										{
											"key": "perPage",
											"value": "{{perPage}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challengePhase successfully 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(pm.response.headers.get('X-Page')).to.eq(iterationData.get('page'))",
											"    pm.expect(pm.response.headers.get('X-Per-Page')).to.eq(iterationData.get('perPage'))",
											"    pm.expect(pm.response.headers.get('X-Total')).to.eq(iterationData.get('total'))",
											"    pm.expect(response.length).to.eq(1)",
											"    pm.expect(response[0].name).to.eq(iterationData.get('name'))",
											"    pm.expect(response[0].description).to.eq(iterationData.get('description'))",
											"    pm.expect(response[0].isActive).to.eq(iterationData.get('isActive'))",
											"    pm.expect(response[0].isTask).to.eq(iterationData.get('isTask'))",
											"    pm.expect(response[0].abbreviation).to.eq(iterationData.get('abbreviation'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-phases?{{paramKey}}={{paramValue}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									],
									"query": [
										{
											"key": "{{paramKey}}",
											"value": "{{paramValue}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challengePhase by invalid parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-phases?{{paramKey}}={{paramValue}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases"
									],
									"query": [
										{
											"key": "{{paramKey}}",
											"value": "{{paramValue}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "fully update challengePhase",
					"item": [
						{
							"name": "fully update challengePhase by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
											"    pm.expect(response.isOpen).to.eq(iterationData.get('isOpen'))",
											"    pm.expect(response.duration).to.eq(iterationData.get('duration'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isOpen\": {{isOpen}},\n    \"duration\": {{duration}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{CHALLENGE_PHASE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{CHALLENGE_PHASE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengePhase by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{CHALLENGE_PHASE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{CHALLENGE_PHASE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengePhase by invalid bearer format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "invalid {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{CHALLENGE_PHASE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{CHALLENGE_PHASE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengePhase by invalid Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isOpen\": {{isOpen}},\n    \"duration\": {{duration}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{testId}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{testId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengePhase by error field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isOpen\": {{isOpen}},\n    \"duration\": {{duration}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{CHALLENGE_PHASE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{CHALLENGE_PHASE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengePhase by invalid field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isOpen\": {{isOpen}},\n    \"duration\": {{duration}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{CHALLENGE_PHASE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{CHALLENGE_PHASE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengePhase by invalid field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": null,\n    \"description\": \"{{description}}\",\n    \"isOpen\": {{isOpen}},\n    \"duration\": {{duration}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{CHALLENGE_PHASE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{CHALLENGE_PHASE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengePhase by invalid field 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": null,\n    \"isOpen\": {{isOpen}},\n    \"duration\": {{duration}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{CHALLENGE_PHASE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{CHALLENGE_PHASE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengePhase by missing field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"{{description}}\",\n    \"isOpen\": {{isOpen}},\n    \"duration\": {{duration}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{CHALLENGE_PHASE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{CHALLENGE_PHASE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengePhase by missing field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"duration\": {{duration}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{CHALLENGE_PHASE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{CHALLENGE_PHASE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengePhase by missing field 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isOpen\": {{isOpen}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{CHALLENGE_PHASE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{CHALLENGE_PHASE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengePhase by unexpected field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isOpen\": {{isOpen}},\n    \"duration\": {{duration}},\n    \"other\": \"{{other}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{CHALLENGE_PHASE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{CHALLENGE_PHASE_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "partially update challengePhase",
					"item": [
						{
							"name": "partially update challengePhase by admin 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
											"    pm.expect(response.isOpen).to.eq(iterationData.get('isOpen'))",
											"    pm.expect(response.duration).to.eq(iterationData.get('duration'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isOpen\": {{isOpen}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{CHALLENGE_PHASE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{CHALLENGE_PHASE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challengePhase by admin 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
											"    pm.expect(response.isOpen).to.eq(iterationData.get('isOpen'))",
											"    pm.expect(response.duration).to.eq(iterationData.get('duration'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"{{description}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{CHALLENGE_PHASE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{CHALLENGE_PHASE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challengePhase by admin 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
											"    pm.expect(response.isOpen).to.eq(iterationData.get('isOpen'))",
											"    pm.expect(response.duration).to.eq(iterationData.get('duration'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{CHALLENGE_PHASE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{CHALLENGE_PHASE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challengePhase by admin 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
											"    pm.expect(response.isOpen).to.eq(iterationData.get('isOpen'))",
											"    pm.expect(response.duration).to.eq(iterationData.get('duration'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"duration\": {{duration}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{CHALLENGE_PHASE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{CHALLENGE_PHASE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challengePhase by admin 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
											"    pm.expect(response.isOpen).to.eq(iterationData.get('isOpen'))",
											"    pm.expect(response.duration).to.eq(iterationData.get('duration'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isOpen\": {{isOpen}},\n    \"duration\": {{duration}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{CHALLENGE_PHASE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{CHALLENGE_PHASE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challengePhase by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{CHALLENGE_PHASE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{CHALLENGE_PHASE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challengePhase by invalid bearer format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "invalid {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{CHALLENGE_PHASE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{CHALLENGE_PHASE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challengePhase by invalid Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isOpen\": {{isOpen}},\n    \"duration\": {{duration}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{testId}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{testId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challengePhase by error field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isOpen\": {{isOpen}},\n    \"duration\": {{duration}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{CHALLENGE_PHASE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{CHALLENGE_PHASE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challengePhase by invalid field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isOpen\": {{isOpen}},\n    \"duration\": {{duration}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{CHALLENGE_PHASE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{CHALLENGE_PHASE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challengePhase by invalid field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": null,\n    \"description\": \"{{description}}\",\n    \"isOpen\": {{isOpen}},\n    \"duration\": {{duration}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{CHALLENGE_PHASE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{CHALLENGE_PHASE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challengePhase by invalid field 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": null,\n    \"isOpen\": {{isOpen}},\n    \"duration\": {{duration}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{CHALLENGE_PHASE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{CHALLENGE_PHASE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challengePhase by unexpected field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isOpen\": {{isOpen}},\n    \"duration\": {{duration}},\n    \"other\": \"{{other}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{CHALLENGE_PHASE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{CHALLENGE_PHASE_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "delete challengePhase",
					"item": [
						{
							"name": "delete challengePhase - id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
											"    pm.expect(response.isOpen).to.eq(iterationData.get('isOpen'))",
											"    pm.expect(response.duration).to.eq(iterationData.get('duration'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{CHALLENGE_PHASE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{CHALLENGE_PHASE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete challengePhase by invalid Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{testId}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{testId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete challengePhase by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{CHALLENGE_PHASE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{CHALLENGE_PHASE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete challengePhase by invalid bearer format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "invalid {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-phases/{{CHALLENGE_PHASE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-phases",
										"{{CHALLENGE_PHASE_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "TimelineTemplates",
			"item": [
				{
					"name": "create timelineTemplate",
					"item": [
						{
							"name": "create timelineTemplate by admin 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(pm.response.status === \"Created\"){",
											"        const response = pm.response.json()",
											"        pm.environment.set(\"TIMELINE_TEMPLATE_ID\", response.id);",
											"        pm.expect(response.name).to.eq(iterationData.get('name'))",
											"        pm.expect(response.description).to.eq(iterationData.get('description'))",
											"        pm.expect(response.isActive).to.eq(iterationData.get('isActive'))",
											"        pm.expect(response.phases[0].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_2\"))",
											"        pm.expect(response.phases[0].defaultDuration).to.eq(iterationData.get('defaultDuration'))",
											"        if(pm.info.iteration === 0) {",
											"          pm.environment.unset(\"TIMELINE_TEMPLATE_ID_2\")",
											"        }",
											"        if(!pm.environment.get(\"TIMELINE_TEMPLATE_ID_2\")) {",
											"            pm.environment.set(\"TIMELINE_TEMPLATE_ID_2\", response.id);",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"phases\": [\n        {\n            \"phaseId\": \"{{CHALLENGE_PHASE_ID_2}}\",\n            \"defaultDuration\": {{defaultDuration}}\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create timelineTemplate by admin 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(pm.response.status === \"Created\"){",
											"        const response = pm.response.json()",
											"        pm.environment.set(\"TIMELINE_TEMPLATE_ID_3\", response.id);",
											"        pm.expect(response.name).to.eq(iterationData.get('name'))",
											"        pm.expect(response.description).to.eq(iterationData.get('description'))",
											"        pm.expect(response.isActive).to.eq(iterationData.get('isActive'))",
											"        pm.expect(response.phases[0].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_3\"))",
											"        pm.expect(response.phases[0].defaultDuration).to.eq(iterationData.get('defaultDuration'))",
											"        pm.expect(response.phases[1].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_4\"))",
											"        pm.expect(response.phases[1].defaultDuration).to.eq(iterationData.get('defaultDuration'))",
											"        pm.expect(response.phases[1].predecessor).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_3\"))",
											"        pm.expect(response.phases[2].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_5\"))",
											"        pm.expect(response.phases[2].defaultDuration).to.eq(iterationData.get('defaultDuration'))",
											"        pm.expect(response.phases[2].predecessor).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_4\"))",
											"        pm.expect(response.phases[3].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_6\"))",
											"        pm.expect(response.phases[3].defaultDuration).to.eq(iterationData.get('defaultDuration'))",
											"        pm.expect(response.phases[3].predecessor).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_5\"))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"phases\": [\n        {\n            \"phaseId\": \"{{CHALLENGE_PHASE_ID_3}}\",\n            \"defaultDuration\": {{defaultDuration}}\n        },\n        {\n            \"phaseId\": \"{{CHALLENGE_PHASE_ID_4}}\",\n            \"defaultDuration\": {{defaultDuration}},\n            \"predecessor\": \"{{CHALLENGE_PHASE_ID_3}}\"\n        },\n        {\n            \"phaseId\": \"{{CHALLENGE_PHASE_ID_5}}\",\n            \"defaultDuration\": {{defaultDuration}},\n            \"predecessor\": \"{{CHALLENGE_PHASE_ID_4}}\"\n        },\n        {\n            \"phaseId\": \"{{CHALLENGE_PHASE_ID_6}}\",\n            \"defaultDuration\": {{defaultDuration}},\n            \"predecessor\": \"{{CHALLENGE_PHASE_ID_5}}\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create timelineTemplate by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create timelineTemplate by invalid bearer format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "invalid {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create timelineTemplate by error field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"phases\": [{\n        \"phaseId\": \"{{CHALLENGE_PHASE_ID_2}}\",\n        \"defaultDuration\": {{defaultDuration}}\n    }]\n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create timelineTemplate by error field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"phases\": [{\n        \"phaseId\": \"{{phaseId}}\",\n        \"defaultDuration\": {{defaultDuration}}\n    }]\n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create timelineTemplate by invalid field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"phases\": [{\n        \"phaseId\": \"{{CHALLENGE_PHASE_ID_2}}\",\n        \"defaultDuration\": {{defaultDuration}}\n    }]\n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create timelineTemplate by invalid field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": null,\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"phases\": [{\n        \"phaseId\": \"{{CHALLENGE_PHASE_ID_2}}\",\n        \"defaultDuration\": {{defaultDuration}}\n    }]\n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create timelineTemplate by invalid field 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": null,\n    \"isActive\": {{isActive}},\n    \"phases\": [{\n        \"phaseId\": \"{{CHALLENGE_PHASE_ID_2}}\",\n        \"defaultDuration\": {{defaultDuration}}\n    }]\n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create timelineTemplate by invalid field 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"phases\": {{phases}}\n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create timelineTemplate by missing field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"phases\": [{\n        \"phaseId\": \"{{CHALLENGE_PHASE_ID_2}}\",\n        \"defaultDuration\": {{defaultDuration}}\n    }]\n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create timelineTemplate by missing field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"phases\": [{\n        \"phaseId\": \"{{CHALLENGE_PHASE_ID_2}}\",\n        \"defaultDuration\": {{defaultDuration}}\n    }]\n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create timelineTemplate by missing field 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}}\n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "create timelineTemplate by unexpected field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"phases\": [{\n        \"phaseId\": \"{{CHALLENGE_PHASE_ID_2}}\",\n        \"defaultDuration\": {{defaultDuration}}\n    }],\n    \"other\": \"{{other}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "get timelineTemplate",
					"item": [
						{
							"name": "get timelineTemplate - id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
											"    pm.expect(response.isActive).to.eq(iterationData.get('isActive'))",
											"    pm.expect(response.phases[0].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_2\"))",
											"    pm.expect(response.phases[0].defaultDuration).to.eq(iterationData.get('defaultDuration'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get timelineTemplate by invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{testId}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{testId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get timelineTemplate by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get timelineTemplate - all",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.eq(iterationData.get('length'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timeline-templates",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "search timelineTemplate",
					"item": [
						{
							"name": "search timelineTemplate successfully 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(pm.response.headers.get('X-Page')).to.eq(iterationData.get('page'))",
											"    pm.expect(pm.response.headers.get('X-Per-Page')).to.eq(iterationData.get('perPage'))",
											"    pm.expect(pm.response.headers.get('X-Total')).to.eq(iterationData.get('total'))",
											"    pm.expect(response.length).to.eq(1)",
											"    pm.expect(response[0].name).to.eq(iterationData.get('name'))",
											"    pm.expect(response[0].description).to.eq(iterationData.get('description'))",
											"    pm.expect(response[0].isActive).to.eq(iterationData.get('isActive'))",
											"    pm.expect(response[0].phases[0].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_2\"))",
											"    pm.expect(response[0].phases[0].defaultDuration).to.eq(iterationData.get('defaultDuration'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timeline-templates?name={{name}}&page={{page}}&perPage={{perPage}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									],
									"query": [
										{
											"key": "name",
											"value": "{{name}}"
										},
										{
											"key": "page",
											"value": "{{page}}"
										},
										{
											"key": "perPage",
											"value": "{{perPage}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search timelineTemplate successfully 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(pm.response.headers.get('X-Page')).to.eq(iterationData.get('page'))",
											"    pm.expect(pm.response.headers.get('X-Per-Page')).to.eq(iterationData.get('perPage'))",
											"    pm.expect(pm.response.headers.get('X-Total')).to.eq(iterationData.get('total'))",
											"    pm.expect(response.length).to.eq(1)",
											"    pm.expect(response[0].name).to.eq(iterationData.get('name'))",
											"    pm.expect(response[0].description).to.eq(iterationData.get('description'))",
											"    pm.expect(response[0].isActive).to.eq(iterationData.get('isActive'))",
											"    pm.expect(response[0].phases[0].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_2\"))",
											"    pm.expect(response[0].phases[0].defaultDuration).to.eq(iterationData.get('defaultDuration'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timeline-templates?{{paramKey}}={{paramValue}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									],
									"query": [
										{
											"key": "{{paramKey}}",
											"value": "{{paramValue}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search timelineTemplate by invalid parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timeline-templates?{{paramKey}}={{paramValue}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates"
									],
									"query": [
										{
											"key": "{{paramKey}}",
											"value": "{{paramValue}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "fully update timelineTemplate",
					"item": [
						{
							"name": "fully update timelineTemplate by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
											"    pm.expect(response.isActive).to.eq(iterationData.get('isActive'))",
											"    pm.expect(response.phases[0].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_2\"))",
											"    pm.expect(response.phases[0].defaultDuration).to.eq(iterationData.get('defaultDuration'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"phases\": [{\n        \"phaseId\": \"{{CHALLENGE_PHASE_ID_2}}\",\n        \"defaultDuration\": {{defaultDuration}}\n    }]\n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update timelineTemplate by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update timelineTemplate by invalid bearer format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "invalid {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update timelineTemplate by invalid Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"phases\": [{\n        \"phaseId\": \"{{CHALLENGE_PHASE_ID_2}}\",\n        \"defaultDuration\": {{defaultDuration}}\n    }]\n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{testId}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{testId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update timelineTemplate by error field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"phases\": [{\n        \"phaseId\": \"{{CHALLENGE_PHASE_ID_2}}\",\n        \"defaultDuration\": {{defaultDuration}}\n    }]\n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update timelineTemplate by error field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"phases\": [{\n        \"phaseId\": \"{{phaseId}}\",\n        \"defaultDuration\": {{defaultDuration}}\n    }]\n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update timelineTemplate by invalid field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"phases\": [{\n        \"phaseId\": \"{{CHALLENGE_PHASE_ID_2}}\",\n        \"defaultDuration\": {{defaultDuration}}\n    }]\n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update timelineTemplate by invalid field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": null,\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"phases\": [{\n        \"phaseId\": \"{{CHALLENGE_PHASE_ID_2}}\",\n        \"defaultDuration\": {{defaultDuration}}\n    }]\n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update timelineTemplate by invalid field 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": null,\n    \"isActive\": {{isActive}},\n    \"phases\": [{\n        \"phaseId\": \"{{CHALLENGE_PHASE_ID_2}}\",\n        \"defaultDuration\": {{defaultDuration}}\n    }]\n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update timelineTemplate by invalid field 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"phases\": {{phases}}\n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update timelineTemplate by missing field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"phases\": [{\n        \"phaseId\": \"{{CHALLENGE_PHASE_ID_2}}\",\n        \"defaultDuration\": {{defaultDuration}}\n    }]\n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update timelineTemplate by missing field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"phases\": [{\n        \"phaseId\": \"{{CHALLENGE_PHASE_ID_2}}\",\n        \"defaultDuration\": {{defaultDuration}}\n    }]\n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update timelineTemplate by missing field 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}}\n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update timelineTemplate by unexpected field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"phases\": [{\n        \"phaseId\": \"{{CHALLENGE_PHASE_ID_2}}\",\n        \"defaultDuration\": {{defaultDuration}}\n    }],\n    \"other\": \"{{other}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "partially update timelineTemplate",
					"item": [
						{
							"name": "partially update timelineTemplate by admin 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
											"    pm.expect(response.isActive).to.eq(iterationData.get('isActive'))",
											"    pm.expect(response.phases[0].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_2\"))",
											"    pm.expect(response.phases[0].defaultDuration).to.eq(iterationData.get('defaultDuration'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isActive\": {{isActive}}\n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update timelineTemplate by admin 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
											"    pm.expect(response.isActive).to.eq(iterationData.get('isActive'))",
											"    pm.expect(response.phases[0].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_2\"))",
											"    pm.expect(response.phases[0].defaultDuration).to.eq(iterationData.get('defaultDuration'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"{{description}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update timelineTemplate by admin 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
											"    pm.expect(response.isActive).to.eq(iterationData.get('isActive'))",
											"    pm.expect(response.phases[0].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_2\"))",
											"    pm.expect(response.phases[0].defaultDuration).to.eq(iterationData.get('defaultDuration'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update timelineTemplate by admin 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
											"    pm.expect(response.isActive).to.eq(iterationData.get('isActive'))",
											"    pm.expect(response.phases[0].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_2\"))",
											"    pm.expect(response.phases[0].defaultDuration).to.eq(iterationData.get('defaultDuration'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"phases\": [{\n        \"phaseId\": \"{{CHALLENGE_PHASE_ID_2}}\",\n        \"defaultDuration\": {{defaultDuration}}\n    }]\n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update timelineTemplate by admin 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
											"    pm.expect(response.isActive).to.eq(iterationData.get('isActive'))",
											"    pm.expect(response.phases[0].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_2\"))",
											"    pm.expect(response.phases[0].defaultDuration).to.eq(iterationData.get('defaultDuration'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"phases\": [{\n        \"phaseId\": \"{{CHALLENGE_PHASE_ID_2}}\",\n        \"defaultDuration\": {{defaultDuration}}\n    }]\n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update timelineTemplate by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update timelineTemplate by invalid bearer format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "invalid {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update timelineTemplate by invalid Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"phases\": [{\n        \"phaseId\": \"{{CHALLENGE_PHASE_ID_2}}\",\n        \"defaultDuration\": {{defaultDuration}}\n    }]\n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{testId}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{testId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update timelineTemplate by error field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"phases\": [{\n        \"phaseId\": \"{{CHALLENGE_PHASE_ID_2}}\",\n        \"defaultDuration\": {{defaultDuration}}\n    }]\n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update timelineTemplate by error field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"phases\": [{\n        \"phaseId\": \"{{phaseId}}\",\n        \"defaultDuration\": {{defaultDuration}}\n    }]\n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update timelineTemplate by invalid field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"phases\": [{\n        \"phaseId\": \"{{CHALLENGE_PHASE_ID_2}}\",\n        \"defaultDuration\": {{defaultDuration}}\n    }]\n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update timelineTemplate by invalid field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": null,\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"phases\": [{\n        \"phaseId\": \"{{CHALLENGE_PHASE_ID_2}}\",\n        \"defaultDuration\": {{defaultDuration}}\n    }]\n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update timelineTemplate by invalid field 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": null,\n    \"isActive\": {{isActive}},\n    \"phases\": [{\n        \"phaseId\": \"{{CHALLENGE_PHASE_ID_2}}\",\n        \"defaultDuration\": {{defaultDuration}}\n    }]\n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update timelineTemplate by invalid field 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"phases\": {{phases}}\n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update timelineTemplate by unexpected field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"isActive\": {{isActive}},\n    \"phases\": [{\n        \"phaseId\": \"{{CHALLENGE_PHASE_ID_2}}\",\n        \"defaultDuration\": {{defaultDuration}}\n    }],\n    \"other\": \"{{other}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "delete timelineTemplate",
					"item": [
						{
							"name": "delete timelineTemplate - id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
											"    pm.expect(response.isActive).to.eq(iterationData.get('isActive'))",
											"    pm.expect(response.phases[0].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_2\"))",
											"    pm.expect(response.phases[0].defaultDuration).to.eq(iterationData.get('defaultDuration'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete timelineTemplate by invalid Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{testId}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{testId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete timelineTemplate by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete timelineTemplate by invalid bearer format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "invalid {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/timeline-templates/{{TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"timeline-templates",
										"{{TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "ChallengeTimelineTemplates",
			"item": [
				{
					"name": "create challengeTimelineTemplate",
					"item": [
						{
							"name": "create challengeTimelineTemplate by admin 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(pm.response.status === \"Created\"){",
											"        const response = pm.response.json()",
											"        pm.environment.set(\"CHALLENGE_TIMELINE_TEMPLATE_ID\", response.id);",
											"        pm.expect(response.isDefault).to.eq(iterationData.get('isDefault'))",
											"        pm.expect(response.trackId).to.eq(pm.environment.get(\"CHALLENGE_TRACK_ID_2\"))",
											"        pm.expect(response.typeId).to.eq(pm.environment.get(\"CHALLENGE_TYPE_ID\"))",
											"        pm.expect(response.timelineTemplateId).to.eq(pm.environment.get(\"TIMELINE_TEMPLATE_ID_2\"))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isDefault\": {{isDefault}},\n    \"typeId\": \"{{CHALLENGE_TYPE_ID}}\",\n    \"trackId\": \"{{CHALLENGE_TRACK_ID_2}}\",\n    \"timelineTemplateId\": \"{{TIMELINE_TEMPLATE_ID_2}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengeTimelineTemplate by admin 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(pm.response.status === \"Created\"){",
											"        const response = pm.response.json()",
											"        pm.environment.set(\"CHALLENGE_TIMELINE_TEMPLATE_ID_2\", response.id);",
											"        pm.expect(response.isDefault).to.eq(iterationData.get('isDefault'))",
											"        pm.expect(response.trackId).to.eq(pm.environment.get(\"CHALLENGE_TRACK_ID_2\"))",
											"        pm.expect(response.typeId).to.eq(pm.environment.get(\"CHALLENGE_TYPE_ID_2\"))",
											"        pm.expect(response.timelineTemplateId).to.eq(pm.environment.get(\"TIMELINE_TEMPLATE_ID_3\"))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isDefault\": {{isDefault}},\n    \"typeId\": \"{{CHALLENGE_TYPE_ID_2}}\",\n    \"trackId\": \"{{CHALLENGE_TRACK_ID_2}}\",\n    \"timelineTemplateId\": \"{{TIMELINE_TEMPLATE_ID_3}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengeTimelineTemplate by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengeTimelineTemplate by invalid bearer format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "invalid {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengeTimelineTemplate by error field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isDefault\": {{isDefault}},\n    \"typeId\": \"{{CHALLENGE_TYPE_ID}}\",\n    \"trackId\": \"{{CHALLENGE_TRACK_ID_2}}\",\n    \"timelineTemplateId\": \"{{TIMELINE_TEMPLATE_ID_2}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengeTimelineTemplate by error field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isDefault\": {{isDefault}},\n    \"typeId\": \"{{typeId}}\",\n    \"trackId\": \"{{CHALLENGE_TRACK_ID_2}}\",\n    \"timelineTemplateId\": \"{{TIMELINE_TEMPLATE_ID_2}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengeTimelineTemplate by error field 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isDefault\": {{isDefault}},\n    \"typeId\": \"{{CHALLENGE_TYPE_ID_2}}\",\n    \"trackId\": \"{{trackId}}\",\n    \"timelineTemplateId\": \"{{TIMELINE_TEMPLATE_ID_2}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengeTimelineTemplate by error field 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isDefault\": {{isDefault}},\n    \"typeId\": \"{{CHALLENGE_TYPE_ID_2}}\",\n    \"trackId\": \"{{CHALLENGE_TRACK_ID_2}}\",\n    \"timelineTemplateId\": \"{{timelineTemplateId}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengeTimelineTemplate by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isDefault\": {{isDefault}},\n    \"typeId\": \"{{typeId}}\",\n    \"trackId\": \"{{trackId}}\",\n    \"timelineTemplateId\": \"{{timelineTemplateId}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengeTimelineTemplate by missing field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"typeId\": \"{{typeId}}\",\n    \"trackId\": \"{{trackId}}\",\n    \"timelineTemplateId\": \"{{timelineTemplateId}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengeTimelineTemplate by missing field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isDefault\": {{isDefault}},\n    \"trackId\": \"{{trackId}}\",\n    \"timelineTemplateId\": \"{{timelineTemplateId}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengeTimelineTemplate by missing field 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isDefault\": {{isDefault}},\n    \"typeId\": \"{{typeId}}\",\n    \"timelineTemplateId\": \"{{timelineTemplateId}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengeTimelineTemplate by missing field 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isDefault\": {{isDefault}},\n    \"typeId\": \"{{typeId}}\",\n    \"trackId\": \"{{trackId}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challengeTimelineTemplate by unexpected field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isDefault\": {{isDefault}},\n    \"typeId\": \"{{typeId}}\",\n    \"trackId\": \"{{trackId}}\",\n    \"timelineTemplateId\": \"{{timelineTemplateId}}\",\n    \"other\": \"{{other}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "get challengeTimelineTemplate",
					"item": [
						{
							"name": "get challengeTimelineTemplate - id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.isDefault).to.eq(iterationData.get('isDefault'))",
											"    pm.expect(response.trackId).to.eq(pm.environment.get(\"CHALLENGE_TRACK_ID_2\"))",
											"    pm.expect(response.typeId).to.eq(pm.environment.get(\"CHALLENGE_TYPE_ID\"))",
											"    pm.expect(response.timelineTemplateId).to.eq(pm.environment.get(\"TIMELINE_TEMPLATE_ID_2\"))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{CHALLENGE_TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{CHALLENGE_TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challengeTimelineTemplate by invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{testId}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{testId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challengeTimelineTemplate - all",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.eq(iterationData.get('length'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "search challengeTimelineTemplate",
					"item": [
						{
							"name": "search challengeTimelineTemplate successfully 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(pm.response.headers.get('X-Page')).to.eq(iterationData.get('page'))",
											"    pm.expect(pm.response.headers.get('X-Per-Page')).to.eq(iterationData.get('perPage'))",
											"    pm.expect(pm.response.headers.get('X-Total')).to.eq(iterationData.get('total'))",
											"    pm.expect(response.length.toString()).to.eq(iterationData.get('total'))",
											"    pm.expect(response[0].typeId).to.eq(pm.environment.get('CHALLENGE_TYPE_ID'))",
											"    pm.expect(response[0].trackId).to.eq(pm.environment.get('CHALLENGE_TRACK_ID_2'))",
											"    pm.expect(response[0].timelineTemplateId).to.eq(pm.environment.get('TIMELINE_TEMPLATE_ID_2'))",
											"    pm.expect(response[0].isDefault).to.eq(iterationData.get(\"isDefault\"))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines?typeId={{CHALLENGE_TYPE_ID}}&trackId={{CHALLENGE_TRACK_ID_2}}&timelineTemplateId={{TIMELINE_TEMPLATE_ID_2}}&isDefault={{isDefault}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									],
									"query": [
										{
											"key": "typeId",
											"value": "{{CHALLENGE_TYPE_ID}}"
										},
										{
											"key": "trackId",
											"value": "{{CHALLENGE_TRACK_ID_2}}"
										},
										{
											"key": "timelineTemplateId",
											"value": "{{TIMELINE_TEMPLATE_ID_2}}"
										},
										{
											"key": "isDefault",
											"value": "{{isDefault}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challengeTimelineTemplate successfully 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(pm.response.headers.get('X-Page')).to.eq(iterationData.get('page'))",
											"    pm.expect(pm.response.headers.get('X-Per-Page')).to.eq(iterationData.get('perPage'))",
											"    pm.expect(pm.response.headers.get('X-Total')).to.eq(iterationData.get('total'))",
											"    pm.expect(response.length.toString()).to.eq(iterationData.get('total'))",
											"    pm.expect(response[0].typeId).to.eq(pm.environment.get('CHALLENGE_TYPE_ID_2'))",
											"    pm.expect(response[0].trackId).to.eq(pm.environment.get('CHALLENGE_TRACK_ID_2'))",
											"    pm.expect(response[0].timelineTemplateId).to.eq(pm.environment.get('TIMELINE_TEMPLATE_ID_3'))",
											"    pm.expect(response[0].isDefault).to.eq(iterationData.get(\"isDefault\"))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines?typeId={{CHALLENGE_TYPE_ID_2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									],
									"query": [
										{
											"key": "typeId",
											"value": "{{CHALLENGE_TYPE_ID_2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challengeTimelineTemplate successfully 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(pm.response.headers.get('X-Page')).to.eq(iterationData.get('page'))",
											"    pm.expect(pm.response.headers.get('X-Per-Page')).to.eq(iterationData.get('perPage'))",
											"    pm.expect(pm.response.headers.get('X-Total')).to.eq(iterationData.get('total'))",
											"    pm.expect(response.length.toString()).to.eq(iterationData.get('total'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines?trackId={{CHALLENGE_TRACK_ID_2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									],
									"query": [
										{
											"key": "trackId",
											"value": "{{CHALLENGE_TRACK_ID_2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challengeTimelineTemplate successfully 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(pm.response.headers.get('X-Page')).to.eq(iterationData.get('page'))",
											"    pm.expect(pm.response.headers.get('X-Per-Page')).to.eq(iterationData.get('perPage'))",
											"    pm.expect(pm.response.headers.get('X-Total')).to.eq(iterationData.get('total'))",
											"    pm.expect(response.length.toString()).to.eq(iterationData.get('total'))",
											"    pm.expect(response[0].typeId).to.eq(pm.environment.get('CHALLENGE_TYPE_ID'))",
											"    pm.expect(response[0].trackId).to.eq(pm.environment.get('CHALLENGE_TRACK_ID_2'))",
											"    pm.expect(response[0].timelineTemplateId).to.eq(pm.environment.get('TIMELINE_TEMPLATE_ID_2'))",
											"    pm.expect(response[0].isDefault).to.eq(iterationData.get(\"isDefault\"))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines?timelineTemplateId={{TIMELINE_TEMPLATE_ID_2}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									],
									"query": [
										{
											"key": "timelineTemplateId",
											"value": "{{TIMELINE_TEMPLATE_ID_2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challengeTimelineTemplate successfully 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(pm.response.headers.get('X-Page')).to.eq(iterationData.get('page'))",
											"    pm.expect(pm.response.headers.get('X-Per-Page')).to.eq(iterationData.get('perPage'))",
											"    pm.expect(pm.response.headers.get('X-Total')).to.eq(iterationData.get('total'))",
											"    pm.expect(response.length.toString()).to.eq(iterationData.get('total'))",
											"    pm.expect(response[0].typeId).to.eq(pm.environment.get('CHALLENGE_TYPE_ID_2'))",
											"    pm.expect(response[0].trackId).to.eq(pm.environment.get('CHALLENGE_TRACK_ID_2'))",
											"    pm.expect(response[0].timelineTemplateId).to.eq(pm.environment.get('TIMELINE_TEMPLATE_ID_3'))",
											"    pm.expect(response[0].isDefault).to.eq(iterationData.get(\"isDefault\"))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines?isDefault={{isDefault}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									],
									"query": [
										{
											"key": "isDefault",
											"value": "{{isDefault}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challengeTimelineTemplate by invalid parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines?{{paramKey}}={{paramValue}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines"
									],
									"query": [
										{
											"key": "{{paramKey}}",
											"value": "{{paramValue}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "fully update challengeTimelineTemplate",
					"item": [
						{
							"name": "fully update challengeTimelineTemplate by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.isDefault).to.eq(iterationData.get('isDefault'))",
											"    pm.expect(response.trackId).to.eq(pm.environment.get(\"CHALLENGE_TRACK_ID_2\"))",
											"    pm.expect(response.typeId).to.eq(pm.environment.get(\"CHALLENGE_TYPE_ID_3\"))",
											"    pm.expect(response.timelineTemplateId).to.eq(pm.environment.get(\"TIMELINE_TEMPLATE_ID_2\"))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isDefault\": {{isDefault}},\n    \"typeId\": \"{{CHALLENGE_TYPE_ID_3}}\",\n    \"trackId\": \"{{CHALLENGE_TRACK_ID_2}}\",\n    \"timelineTemplateId\": \"{{TIMELINE_TEMPLATE_ID_2}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{CHALLENGE_TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{CHALLENGE_TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengeTimelineTemplate by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{CHALLENGE_TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{CHALLENGE_TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengeTimelineTemplate by invalid bearer format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "invalid {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{CHALLENGE_TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{CHALLENGE_TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengeTimelineTemplate by invalid Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isDefault\": {{isDefault}},\n    \"typeId\": \"{{CHALLENGE_TYPE_ID_3}}\",\n    \"trackId\": \"{{CHALLENGE_TRACK_ID_2}}\",\n    \"timelineTemplateId\": \"{{TIMELINE_TEMPLATE_ID_2}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{testId}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{testId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengeTimelineTemplate by error field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isDefault\": {{isDefault}},\n    \"typeId\": \"{{CHALLENGE_TYPE_ID_2}}\",\n    \"trackId\": \"{{CHALLENGE_TRACK_ID_2}}\",\n    \"timelineTemplateId\": \"{{TIMELINE_TEMPLATE_ID_3}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{CHALLENGE_TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{CHALLENGE_TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengeTimelineTemplate by error field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isDefault\": {{isDefault}},\n    \"typeId\": \"{{typeId}}\",\n    \"trackId\": \"{{CHALLENGE_TRACK_ID_2}}\",\n    \"timelineTemplateId\": \"{{TIMELINE_TEMPLATE_ID_2}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{CHALLENGE_TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{CHALLENGE_TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengeTimelineTemplate by error field 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isDefault\": {{isDefault}},\n    \"typeId\": \"{{CHALLENGE_TYPE_ID_2}}\",\n    \"trackId\": \"{{trackId}}\",\n    \"timelineTemplateId\": \"{{TIMELINE_TEMPLATE_ID_2}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{CHALLENGE_TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{CHALLENGE_TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengeTimelineTemplate by error field 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isDefault\": {{isDefault}},\n    \"typeId\": \"{{CHALLENGE_TYPE_ID_2}}\",\n    \"trackId\": \"{{CHALLENGE_TRACK_ID_2}}\",\n    \"timelineTemplateId\": \"{{timelineTemplateId}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{CHALLENGE_TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{CHALLENGE_TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengeTimelineTemplate by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isDefault\": {{isDefault}},\n    \"typeId\": \"{{typeId}}\",\n    \"trackId\": \"{{trackId}}\",\n    \"timelineTemplateId\": \"{{timelineTemplateId}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{CHALLENGE_TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{CHALLENGE_TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengeTimelineTemplate by missing field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"typeId\": \"{{typeId}}\",\n    \"trackId\": \"{{trackId}}\",\n    \"timelineTemplateId\": \"{{timelineTemplateId}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{CHALLENGE_TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{CHALLENGE_TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengeTimelineTemplate by missing field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isDefault\": {{isDefault}},\n    \"trackId\": \"{{trackId}}\",\n    \"timelineTemplateId\": \"{{timelineTemplateId}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{CHALLENGE_TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{CHALLENGE_TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengeTimelineTemplate by missing field 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isDefault\": {{isDefault}},\n    \"typeId\": \"{{typeId}}\",\n    \"timelineTemplateId\": \"{{timelineTemplateId}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{CHALLENGE_TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{CHALLENGE_TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengeTimelineTemplate by missing field 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isDefault\": {{isDefault}},\n    \"typeId\": \"{{typeId}}\",\n    \"trackId\": \"{{trackId}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{CHALLENGE_TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{CHALLENGE_TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challengeTimelineTemplate by unexpected field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isDefault\": {{isDefault}},\n    \"typeId\": \"{{typeId}}\",\n    \"trackId\": \"{{trackId}}\",\n    \"timelineTemplateId\": \"{{timelineTemplateId}}\",\n    \"other\": \"{{other}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{CHALLENGE_TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{CHALLENGE_TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "delete challengeTimelineTemplate",
					"item": [
						{
							"name": "delete challengeTimelineTemplate - id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.isDefault).to.eq(iterationData.get('isDefault'))",
											"    pm.expect(response.trackId).to.eq(pm.environment.get(\"CHALLENGE_TRACK_ID_2\"))",
											"    pm.expect(response.typeId).to.eq(pm.environment.get(\"CHALLENGE_TYPE_ID_3\"))",
											"    pm.expect(response.timelineTemplateId).to.eq(pm.environment.get(\"TIMELINE_TEMPLATE_ID_2\"))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{CHALLENGE_TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{CHALLENGE_TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete challengeTimelineTemplate by invalid Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{testId}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{testId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete challengeTimelineTemplate by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{CHALLENGE_TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{CHALLENGE_TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete challengeTimelineTemplate by invalid bearer format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "invalid {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-timelines/{{CHALLENGE_TIMELINE_TEMPLATE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-timelines",
										"{{CHALLENGE_TIMELINE_TEMPLATE_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Challenges",
			"item": [
				{
					"name": "create challenge",
					"item": [
						{
							"name": "create challenge successfully 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(pm.response.status === \"Created\"){",
											"        const response = pm.response.json()",
											"        pm.environment.set(\"CHALLENGE_ID\", response.id);",
											"        pm.expect(response).to.have.property('created')",
											"        pm.expect(response.createdBy).to.eq(iterationData.get('createdBy'))",
											"        pm.expect(response).to.have.property('updated')",
											"        pm.expect(response.updatedBy).to.eq(iterationData.get('updatedBy'))",
											"        pm.expect(response.projectId).to.eq(iterationData.get('projectId'))",
											"        pm.expect(response.typeId).to.eq(pm.environment.get(\"CHALLENGE_TYPE_ID_2\"))",
											"        pm.expect(response.trackId).to.eq(pm.environment.get(\"CHALLENGE_TRACK_ID_2\"))",
											"        pm.expect(response.name).to.eq(iterationData.get('name'))",
											"        pm.expect(response.status).to.eq(iterationData.get('status'))",
											"        pm.expect(response.startDate).to.eq(response.phases[0].scheduledStartDate)",
											"        pm.expect(response.description).to.eq(iterationData.get('description'))",
											"        pm.expect(response.task.isTask).to.eq(iterationData.get('isTask'))",
											"        pm.expect(response.task.isAssigned).to.eq(iterationData.get('isAssigned'))",
											"        pm.expect(response.task.isTask).to.eq(iterationData.get('isTask'))",
											"        pm.expect(response.task.memberId).to.be.null",
											"        pm.expect(response.groups).to.deep.eq(iterationData.get('groups'))",
											"        pm.expect(response.timelineTemplateId).to.eq(pm.environment.get(\"TIMELINE_TEMPLATE_ID_3\"))",
											"        pm.expect(response.phases[0].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_3\"))",
											"        pm.expect(response.phases[0].duration).to.eq(iterationData.get('phases')[0].duration)",
											"        pm.expect(response.phases[0].name).to.eq(iterationData.get('phases')[0].name)",
											"        pm.expect(response.phases[0].isOpen).to.eq(iterationData.get('phases')[0].isOpen)",
											"        pm.expect(response.phases[0]).to.have.property('scheduledStartDate')",
											"        pm.expect(response.phases[0]).to.have.property('scheduledEndDate')",
											"        pm.expect(response.phases[0]).to.have.property('actualStartDate')",
											"        pm.expect(response.phases[0]).to.have.property('actualEndDate')",
											"        pm.expect(response.phases[1].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_4\"))",
											"        pm.expect(response.phases[1].duration).to.eq(iterationData.get('phases')[1].duration)",
											"        pm.expect(response.phases[1].name).to.eq(iterationData.get('phases')[1].name)",
											"        pm.expect(response.phases[1].isOpen).to.eq(iterationData.get('phases')[1].isOpen)",
											"        pm.expect(response.phases[1].predecessor).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_3\"))",
											"        pm.expect(response.phases[1]).to.have.property('scheduledStartDate')",
											"        pm.expect(response.phases[1]).to.have.property('scheduledEndDate')",
											"        pm.expect(response.phases[1]).to.have.property('actualStartDate')",
											"        pm.expect(response.phases[1]).to.have.property('actualEndDate')",
											"        pm.expect(response.phases[2].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_5\"))",
											"        pm.expect(response.phases[2].duration).to.eq(iterationData.get('phases')[2].duration)",
											"        pm.expect(response.phases[2].name).to.eq(iterationData.get('phases')[2].name)",
											"        pm.expect(response.phases[2].isOpen).to.eq(iterationData.get('phases')[2].isOpen)",
											"        pm.expect(response.phases[2].predecessor).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_4\"))",
											"        pm.expect(response.phases[2]).to.have.property('scheduledStartDate')",
											"        pm.expect(response.phases[2]).to.have.property('scheduledEndDate')",
											"        pm.expect(response.phases[2]).to.have.property('actualStartDate')",
											"        pm.expect(response.phases[2]).to.have.property('actualEndDate')",
											"        pm.expect(response.phases[3].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_6\"))",
											"        pm.expect(response.phases[3].duration).to.eq(iterationData.get('phases')[3].duration)",
											"        pm.expect(response.phases[3].name).to.eq(iterationData.get('phases')[3].name)",
											"        pm.expect(response.phases[3].isOpen).to.eq(iterationData.get('phases')[3].isOpen)",
											"        pm.expect(response.phases[3].predecessor).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_5\"))",
											"        pm.expect(response.phases[3]).to.have.property('scheduledStartDate')",
											"        pm.expect(response.phases[3]).to.have.property('scheduledEndDate')",
											"        pm.expect(response.phases[3]).to.have.property('actualStartDate')",
											"        pm.expect(response.phases[3]).to.have.property('actualEndDate')",
											"        pm.expect(response.terms).to.deep.eq(iterationData.get('terms'))",
											"        pm.expect(response.descriptionFormat).to.eq(iterationData.get('descriptionFormat'))",
											"        pm.expect(response.endDate).to.eq(response.phases[0].scheduledEndDate)",
											"        pm.expect(response.numOfSubmissions).to.eq(iterationData.get('numOfSubmissions'))",
											"        pm.expect(response.numOfRegistrants).to.eq(iterationData.get('numOfRegistrants'))",
											"        pm.expect(response.currentPhaseNames).to.deep.eq(iterationData.get('currentPhaseNames'))",
											"        pm.expect(response.registrationStartDate).to.eq(response.phases[0].scheduledStartDate)",
											"        pm.expect(response.registrationEndDate).to.eq(response.phases[0].scheduledEndDate)",
											"        pm.expect(response.submissionStartDate).to.eq(response.phases[1].scheduledStartDate)",
											"        pm.expect(response.submissionEndDate).to.eq(response.phases[1].scheduledEndDate)",
											"        pm.expect(response.track).to.eq(iterationData.get('track'))",
											"        pm.expect(response.type).to.eq(iterationData.get('type'))        ",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"projectId\": \"{{projectId}}\",\n    \"typeId\": \"{{CHALLENGE_TYPE_ID_2}}\",\n    \"trackId\": \"{{CHALLENGE_TRACK_ID_2}}\",\n    \"name\": \"{{name}}\",\n    \"status\": \"{{status}}\",\n    \"startDate\": \"{{startDate}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challenge successfully 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(pm.response.status === \"Created\"){",
											"        const response = pm.response.json()",
											"        pm.environment.set(\"CHALLENGE_ID_2\", response.id);",
											"        pm.expect(response).to.have.property('created')",
											"        pm.expect(response.createdBy).to.eq(iterationData.get('createdBy'))",
											"        pm.expect(response).to.have.property('updated')",
											"        pm.expect(response.updatedBy).to.eq(iterationData.get('updatedBy'))",
											"        pm.expect(response.projectId).to.eq(iterationData.get('projectId'))",
											"        pm.expect(response.typeId).to.eq(pm.environment.get(\"CHALLENGE_TYPE_ID_3\"))",
											"        pm.expect(response.trackId).to.eq(pm.environment.get(\"CHALLENGE_TRACK_ID_2\"))",
											"        pm.expect(response.name).to.eq(iterationData.get('name'))",
											"        pm.expect(response.status).to.eq(iterationData.get('status'))",
											"        pm.expect(response.startDate).to.eq(response.phases[0].scheduledStartDate)",
											"        pm.expect(response.description).to.eq(iterationData.get('description'))",
											"        pm.expect(response.groups).to.deep.eq(iterationData.get('groups'))",
											"        pm.expect(response.timelineTemplateId).to.eq(pm.environment.get(\"TIMELINE_TEMPLATE_ID_3\"))",
											"        pm.expect(response.phases[0].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_3\"))",
											"        pm.expect(response.phases[0].duration).to.eq(iterationData.get('phases')[0].duration)",
											"        pm.expect(response.phases[0].name).to.eq(iterationData.get('phases')[0].name)",
											"        pm.expect(response.phases[0].isOpen).to.eq(iterationData.get('phases')[0].isOpen)",
											"        pm.expect(response.phases[0]).to.have.property('scheduledStartDate')",
											"        pm.expect(response.phases[0]).to.have.property('scheduledEndDate')",
											"        pm.expect(response.phases[0]).to.have.property('actualStartDate')",
											"        pm.expect(response.phases[0]).to.have.property('actualEndDate')",
											"        pm.expect(response.phases[1].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_4\"))",
											"        pm.expect(response.phases[1].duration).to.eq(iterationData.get('phases')[1].duration)",
											"        pm.expect(response.phases[1].name).to.eq(iterationData.get('phases')[1].name)",
											"        pm.expect(response.phases[1].isOpen).to.eq(iterationData.get('phases')[1].isOpen)",
											"        pm.expect(response.phases[1].predecessor).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_3\"))",
											"        pm.expect(response.phases[1]).to.have.property('scheduledStartDate')",
											"        pm.expect(response.phases[1]).to.have.property('scheduledEndDate')",
											"        pm.expect(response.phases[1]).to.have.property('actualStartDate')",
											"        pm.expect(response.phases[1]).to.have.property('actualEndDate')",
											"        pm.expect(response.phases[2].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_5\"))",
											"        pm.expect(response.phases[2].duration).to.eq(iterationData.get('phases')[2].duration)",
											"        pm.expect(response.phases[2].name).to.eq(iterationData.get('phases')[2].name)",
											"        pm.expect(response.phases[2].isOpen).to.eq(iterationData.get('phases')[2].isOpen)",
											"        pm.expect(response.phases[2].predecessor).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_4\"))",
											"        pm.expect(response.phases[2]).to.have.property('scheduledStartDate')",
											"        pm.expect(response.phases[2]).to.have.property('scheduledEndDate')",
											"        pm.expect(response.phases[2]).to.have.property('actualStartDate')",
											"        pm.expect(response.phases[2]).to.have.property('actualEndDate')",
											"        pm.expect(response.phases[3].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_6\"))",
											"        pm.expect(response.phases[3].duration).to.eq(iterationData.get('phases')[3].duration)",
											"        pm.expect(response.phases[3].name).to.eq(iterationData.get('phases')[3].name)",
											"        pm.expect(response.phases[3].isOpen).to.eq(iterationData.get('phases')[3].isOpen)",
											"        pm.expect(response.phases[3].predecessor).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_5\"))",
											"        pm.expect(response.phases[3]).to.have.property('scheduledStartDate')",
											"        pm.expect(response.phases[3]).to.have.property('scheduledEndDate')",
											"        pm.expect(response.phases[3]).to.have.property('actualStartDate')",
											"        pm.expect(response.phases[3]).to.have.property('actualEndDate')",
											"        pm.expect(response.terms).to.deep.eq(iterationData.get('terms'))",
											"        pm.expect(response.descriptionFormat).to.eq(iterationData.get('descriptionFormat'))",
											"        pm.expect(response.endDate).to.eq(response.phases[0].scheduledEndDate)",
											"        pm.expect(response.numOfSubmissions).to.eq(iterationData.get('numOfSubmissions'))",
											"        pm.expect(response.numOfRegistrants).to.eq(iterationData.get('numOfRegistrants'))",
											"        pm.expect(response.currentPhaseNames).to.deep.eq(iterationData.get('currentPhaseNames'))",
											"        pm.expect(response.registrationStartDate).to.eq(response.phases[0].scheduledStartDate)",
											"        pm.expect(response.registrationEndDate).to.eq(response.phases[0].scheduledEndDate)",
											"        pm.expect(response.submissionStartDate).to.eq(response.phases[1].scheduledStartDate)",
											"        pm.expect(response.submissionEndDate).to.eq(response.phases[1].scheduledEndDate)",
											"        pm.expect(response.track).to.eq(iterationData.get('track'))",
											"        pm.expect(response.type).to.eq(iterationData.get('type'))        ",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"projectId\": \"{{projectId}}\",\n    \"typeId\": \"{{CHALLENGE_TYPE_ID_3}}\",\n    \"trackId\": \"{{CHALLENGE_TRACK_ID_2}}\",\n    \"timelineTemplateId\": \"{{TIMELINE_TEMPLATE_ID_3}}\",\n    \"name\": \"{{name}}\",\n    \"status\": \"{{status}}\",\n    \"startDate\": \"{{startDate}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challenge successfully 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(pm.response.status === \"Created\"){",
											"        const response = pm.response.json()",
											"        pm.environment.set(\"CHALLENGE_ID_3\", response.id);",
											"        pm.expect(response).to.have.property('created')",
											"        pm.expect(response.createdBy).to.eq(iterationData.get('createdBy'))",
											"        pm.expect(response).to.have.property('updated')",
											"        pm.expect(response.updatedBy).to.eq(iterationData.get('updatedBy'))",
											"        pm.expect(response.projectId).to.eq(iterationData.get('projectId'))",
											"        pm.expect(response.typeId).to.eq(pm.environment.get(\"CHALLENGE_TYPE_ID\"))",
											"        pm.expect(response.trackId).to.eq(pm.environment.get(\"CHALLENGE_TRACK_ID_3\"))",
											"        pm.expect(response.name).to.eq(iterationData.get('name'))",
											"        pm.expect(response.status).to.eq(iterationData.get('status'))",
											"        pm.expect(response.startDate).to.eq(response.phases[0].scheduledStartDate)",
											"        pm.expect(response.description).to.eq(iterationData.get('description'))",
											"        pm.expect(response.tags).to.deep.eq(iterationData.get('tagsArray'))",
											"        pm.expect(response.groups).to.deep.eq(iterationData.get('groupsArray'))",
											"        pm.expect(response.timelineTemplateId).to.eq(pm.environment.get(\"TIMELINE_TEMPLATE_ID_3\"))",
											"        pm.expect(response.phases[0].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_3\"))",
											"        pm.expect(response.phases[0].duration).to.eq(iterationData.get('phases')[0].duration)",
											"        pm.expect(response.phases[0].name).to.eq(iterationData.get('phases')[0].name)",
											"        pm.expect(response.phases[0].isOpen).to.eq(iterationData.get('phases')[0].isOpen)",
											"        pm.expect(response.phases[0]).to.have.property('scheduledStartDate')",
											"        pm.expect(response.phases[0]).to.have.property('scheduledEndDate')",
											"        pm.expect(response.phases[0]).to.have.property('actualStartDate')",
											"        pm.expect(response.phases[0]).to.have.property('actualEndDate')",
											"        pm.expect(response.phases[1].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_4\"))",
											"        pm.expect(response.phases[1].duration).to.eq(iterationData.get('phases')[1].duration)",
											"        pm.expect(response.phases[1].name).to.eq(iterationData.get('phases')[1].name)",
											"        pm.expect(response.phases[1].isOpen).to.eq(iterationData.get('phases')[1].isOpen)",
											"        pm.expect(response.phases[1].predecessor).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_3\"))",
											"        pm.expect(response.phases[1]).to.have.property('scheduledStartDate')",
											"        pm.expect(response.phases[1]).to.have.property('scheduledEndDate')",
											"        pm.expect(response.phases[1]).to.have.property('actualStartDate')",
											"        pm.expect(response.phases[1]).to.have.property('actualEndDate')",
											"        pm.expect(response.phases[2].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_5\"))",
											"        pm.expect(response.phases[2].duration).to.eq(iterationData.get('phases')[2].duration)",
											"        pm.expect(response.phases[2].name).to.eq(iterationData.get('phases')[2].name)",
											"        pm.expect(response.phases[2].isOpen).to.eq(iterationData.get('phases')[2].isOpen)",
											"        pm.expect(response.phases[2].predecessor).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_4\"))",
											"        pm.expect(response.phases[2]).to.have.property('scheduledStartDate')",
											"        pm.expect(response.phases[2]).to.have.property('scheduledEndDate')",
											"        pm.expect(response.phases[2]).to.have.property('actualStartDate')",
											"        pm.expect(response.phases[2]).to.have.property('actualEndDate')",
											"        pm.expect(response.phases[3].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_6\"))",
											"        pm.expect(response.phases[3].duration).to.eq(iterationData.get('phases')[3].duration)",
											"        pm.expect(response.phases[3].name).to.eq(iterationData.get('phases')[3].name)",
											"        pm.expect(response.phases[3].isOpen).to.eq(iterationData.get('phases')[3].isOpen)",
											"        pm.expect(response.phases[3].predecessor).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_5\"))",
											"        pm.expect(response.phases[3]).to.have.property('scheduledStartDate')",
											"        pm.expect(response.phases[3]).to.have.property('scheduledEndDate')",
											"        pm.expect(response.phases[3]).to.have.property('actualStartDate')",
											"        pm.expect(response.phases[3]).to.have.property('actualEndDate')",
											"        pm.expect(response.terms).to.deep.eq(iterationData.get('termsArray'))",
											"        pm.expect(response.descriptionFormat).to.eq(iterationData.get('descriptionFormat'))",
											"        pm.expect(response.endDate).to.eq(response.phases[0].scheduledEndDate)",
											"        pm.expect(response.overview).to.deep.eq(iterationData.get('overview'))",
											"        pm.expect(response.numOfSubmissions).to.eq(iterationData.get('numOfSubmissions'))",
											"        pm.expect(response.numOfRegistrants).to.eq(iterationData.get('numOfRegistrants'))",
											"        pm.expect(response.currentPhaseNames).to.deep.eq(iterationData.get('currentPhaseNames'))",
											"        pm.expect(response.registrationStartDate).to.eq(response.phases[0].scheduledStartDate)",
											"        pm.expect(response.registrationEndDate).to.eq(response.phases[0].scheduledEndDate)",
											"        pm.expect(response.submissionStartDate).to.eq(response.phases[1].scheduledStartDate)",
											"        pm.expect(response.submissionEndDate).to.eq(response.phases[1].scheduledEndDate)",
											"        pm.expect(response.track).to.eq(iterationData.get('track'))",
											"        pm.expect(response.type).to.eq(iterationData.get('type'))        ",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"projectId\": \"{{projectId}}\",\n    \"typeId\": \"{{CHALLENGE_TYPE_ID}}\",\n    \"trackId\": \"{{CHALLENGE_TRACK_ID_3}}\",\n    \"timelineTemplateId\": \"{{TIMELINE_TEMPLATE_ID_3}}\",\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"status\": \"{{status}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"tags\": {{tags}},\n    \"groups\": {{groups}},\n    \"terms\": {{terms}},\n    \"prizeSets\": {{prizeSets}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challenge successfully 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(pm.response.status === \"Created\"){",
											"        const response = pm.response.json()",
											"        pm.environment.set(\"CHALLENGE_ID_4\", response.id);",
											"        pm.expect(response).to.have.property('created')",
											"        pm.expect(response.createdBy).to.eq(iterationData.get('createdBy'))",
											"        pm.expect(response).to.have.property('updated')",
											"        pm.expect(response.updatedBy).to.eq(iterationData.get('updatedBy'))",
											"        pm.expect(response.projectId).to.eq(iterationData.get('projectId'))",
											"        pm.expect(response.typeId).to.eq(pm.environment.get(\"CHALLENGE_TYPE_ID\"))",
											"        pm.expect(response.trackId).to.eq(pm.environment.get(\"CHALLENGE_TRACK_ID_3\"))",
											"        pm.expect(response.name).to.eq(iterationData.get('name'))",
											"        pm.expect(response.status).to.eq(iterationData.get('status'))",
											"        pm.expect(response.startDate).to.eq(response.phases[0].scheduledStartDate)",
											"        pm.expect(response.description).to.eq(iterationData.get('description'))",
											"        pm.expect(response.tags).to.deep.eq(iterationData.get('tagsArray'))",
											"        pm.expect(response.groups).to.deep.eq(iterationData.get('groupsArray'))",
											"        pm.expect(response.timelineTemplateId).to.eq(pm.environment.get(\"TIMELINE_TEMPLATE_ID_3\"))",
											"        pm.expect(response.phases[0].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_3\"))",
											"        pm.expect(response.phases[0].duration).to.eq(iterationData.get('phases')[0].duration)",
											"        pm.expect(response.phases[0].name).to.eq(iterationData.get('phases')[0].name)",
											"        pm.expect(response.phases[0].isOpen).to.eq(iterationData.get('phases')[0].isOpen)",
											"        pm.expect(response.phases[0]).to.have.property('scheduledStartDate')",
											"        pm.expect(response.phases[0]).to.have.property('scheduledEndDate')",
											"        pm.expect(response.phases[0]).to.have.property('actualStartDate')",
											"        pm.expect(response.phases[0]).to.have.property('actualEndDate')",
											"        pm.expect(response.phases[1].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_4\"))",
											"        pm.expect(response.phases[1].duration).to.eq(iterationData.get('phases')[1].duration)",
											"        pm.expect(response.phases[1].name).to.eq(iterationData.get('phases')[1].name)",
											"        pm.expect(response.phases[1].isOpen).to.eq(iterationData.get('phases')[1].isOpen)",
											"        pm.expect(response.phases[1].predecessor).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_3\"))",
											"        pm.expect(response.phases[1]).to.have.property('scheduledStartDate')",
											"        pm.expect(response.phases[1]).to.have.property('scheduledEndDate')",
											"        pm.expect(response.phases[1]).to.have.property('actualStartDate')",
											"        pm.expect(response.phases[1]).to.have.property('actualEndDate')",
											"        pm.expect(response.phases[2].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_5\"))",
											"        pm.expect(response.phases[2].duration).to.eq(iterationData.get('phases')[2].duration)",
											"        pm.expect(response.phases[2].name).to.eq(iterationData.get('phases')[2].name)",
											"        pm.expect(response.phases[2].isOpen).to.eq(iterationData.get('phases')[2].isOpen)",
											"        pm.expect(response.phases[2].predecessor).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_4\"))",
											"        pm.expect(response.phases[2]).to.have.property('scheduledStartDate')",
											"        pm.expect(response.phases[2]).to.have.property('scheduledEndDate')",
											"        pm.expect(response.phases[2]).to.have.property('actualStartDate')",
											"        pm.expect(response.phases[2]).to.have.property('actualEndDate')",
											"        pm.expect(response.phases[3].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_6\"))",
											"        pm.expect(response.phases[3].duration).to.eq(iterationData.get('phases')[3].duration)",
											"        pm.expect(response.phases[3].name).to.eq(iterationData.get('phases')[3].name)",
											"        pm.expect(response.phases[3].isOpen).to.eq(iterationData.get('phases')[3].isOpen)",
											"        pm.expect(response.phases[3].predecessor).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_5\"))",
											"        pm.expect(response.phases[3]).to.have.property('scheduledStartDate')",
											"        pm.expect(response.phases[3]).to.have.property('scheduledEndDate')",
											"        pm.expect(response.phases[3]).to.have.property('actualStartDate')",
											"        pm.expect(response.phases[3]).to.have.property('actualEndDate')",
											"        pm.expect(response.terms).to.deep.eq(iterationData.get('termsArray'))",
											"        pm.expect(response.descriptionFormat).to.eq(iterationData.get('descriptionFormat'))",
											"        pm.expect(response.endDate).to.eq(response.phases[0].scheduledEndDate)",
											"        pm.expect(response.overview).to.deep.eq(iterationData.get('overview'))",
											"        pm.expect(response.numOfSubmissions).to.eq(iterationData.get('numOfSubmissions'))",
											"        pm.expect(response.numOfRegistrants).to.eq(iterationData.get('numOfRegistrants'))",
											"        pm.expect(response.currentPhaseNames).to.deep.eq(iterationData.get('currentPhaseNames'))",
											"        pm.expect(response.registrationStartDate).to.eq(response.phases[0].scheduledStartDate)",
											"        pm.expect(response.registrationEndDate).to.eq(response.phases[0].scheduledEndDate)",
											"        pm.expect(response.submissionStartDate).to.eq(response.phases[1].scheduledStartDate)",
											"        pm.expect(response.submissionEndDate).to.eq(response.phases[1].scheduledEndDate)",
											"        pm.expect(response.track).to.eq(iterationData.get('track'))",
											"        pm.expect(response.type).to.eq(iterationData.get('type'))        ",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"projectId\": \"{{projectId}}\",\n    \"typeId\": \"{{CHALLENGE_TYPE_ID}}\",\n    \"trackId\": \"{{CHALLENGE_TRACK_ID_3}}\",\n    \"timelineTemplateId\": \"{{TIMELINE_TEMPLATE_ID_3}}\",\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"status\": \"{{status}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"tags\": {{tags}},\n    \"groups\": {{groups}},\n    \"terms\": {{terms}},\n    \"prizeSets\": {{prizeSets}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challenge by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challenge by invalid bearer format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "invalid {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challenge by error field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"projectId\": \"{{projectId}}\",\n    \"typeId\": \"{{CHALLENGE_TYPE_ID}}\",\n    \"trackId\": \"{{CHALLENGE_TRACK_ID_3}}\",\n    \"timelineTemplateId\": \"{{TIMELINE_TEMPLATE_ID_3}}\",\n    \"name\": \"{{name}}\",\n    \"status\": \"{{status}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"tags\": {{tags}},\n    \"groups\": {{groups}},\n    \"terms\": {{terms}},\n    \"prizeSets\": {{prizeSets}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challenge by error field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"projectId\": \"{{projectId}}\",\n    \"typeId\": \"{{typeId}}\",\n    \"trackId\": \"{{CHALLENGE_TRACK_ID_3}}\",\n    \"timelineTemplateId\": \"{{TIMELINE_TEMPLATE_ID_3}}\",\n    \"name\": \"{{name}}\",\n    \"status\": \"{{status}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"tags\": {{tags}},\n    \"groups\": {{groups}},\n    \"terms\": {{terms}},\n    \"prizeSets\": {{prizeSets}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challenge by error field 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"projectId\": \"{{projectId}}\",\n    \"typeId\": \"{{CHALLENGE_TYPE_ID}}\",\n    \"trackId\": \"{{trackId}}\",\n    \"timelineTemplateId\": \"{{TIMELINE_TEMPLATE_ID_3}}\",\n    \"name\": \"{{name}}\",\n    \"status\": \"{{status}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"tags\": {{tags}},\n    \"groups\": {{groups}},\n    \"terms\": {{terms}},\n    \"prizeSets\": {{prizeSets}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challenge by error field 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"projectId\": \"{{projectId}}\",\n    \"typeId\": \"{{CHALLENGE_TYPE_ID}}\",\n    \"trackId\": \"{{CHALLENGE_TRACK_ID_3}}\",\n    \"timelineTemplateId\": \"{{timelineTemplateId}}\",\n    \"name\": \"{{name}}\",\n    \"status\": \"{{status}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"tags\": {{tags}},\n    \"groups\": {{groups}},\n    \"terms\": {{terms}},\n    \"prizeSets\": {{prizeSets}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challenge by error field 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message').toString().replace(\"#ID\",pm.environment.get('TIMELINE_TEMPLATE_ID_2')))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"projectId\": \"{{projectId}}\",\n    \"typeId\": \"{{CHALLENGE_TYPE_ID}}\",\n    \"trackId\": \"{{CHALLENGE_TRACK_ID_3}}\",\n    \"timelineTemplateId\": \"{{TIMELINE_TEMPLATE_ID_2}}\",\n    \"name\": \"{{name}}\",\n    \"status\": \"{{status}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"tags\": {{tags}},\n    \"groups\": {{groups}},\n    \"terms\": {{terms}},\n    \"prizeSets\": {{prizeSets}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challenge by error field 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"projectId\": \"{{projectId}}\",\n    \"typeId\": \"{{CHALLENGE_TYPE_ID_2}}\",\n    \"trackId\": \"{{CHALLENGE_TRACK_ID_3}}\",\n    \"timelineTemplateId\": \"{{TIMELINE_TEMPLATE_ID_3}}\",\n    \"name\": \"{{name}}\",\n    \"status\": \"{{status}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"tags\": {{tags}},\n    \"groups\": {{groups}},\n    \"terms\": {{terms}},\n    \"prizeSets\": {{prizeSets}},\n    \"task\": {\n        \"memberId\": \"{{memberId}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challenge by error field 7",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"projectId\": \"{{projectId}}\",\n    \"typeId\": \"{{CHALLENGE_TYPE_ID}}\",\n    \"trackId\": \"{{CHALLENGE_TRACK_ID_3}}\",\n    \"timelineTemplateId\": \"{{TIMELINE_TEMPLATE_ID_3}}\",\n    \"name\": \"{{name}}\",\n    \"status\": \"{{status}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"tags\": {{tags}},\n    \"groups\": {{groups}},\n    \"terms\": {{terms}},\n    \"prizeSets\": {{prizeSets}},\n    \"phases\": [\n        {\n            \"phaseId\": \"{{phaseId}}\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challenge by error field 8",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message').toString().replace('#TRACK',pm.environment.get('CHALLENGE_TRACK_ID_3')).replace('#TYPE',pm.environment.get('CHALLENGE_TYPE_ID')))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"projectId\": \"{{projectId}}\",\n    \"typeId\": \"{{CHALLENGE_TYPE_ID}}\",\n    \"trackId\": \"{{CHALLENGE_TRACK_ID_3}}\",\n    \"name\": \"{{name}}\",\n    \"status\": \"{{status}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"tags\": {{tags}},\n    \"groups\": {{groups}},\n    \"terms\": {{terms}},\n    \"prizeSets\": {{prizeSets}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challenge by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"projectId\": \"{{projectId}}\",\n    \"typeId\": \"{{typeId}}\",\n    \"trackId\": \"{{trackId}}\",\n    \"timelineTemplateId\": \"{{timelineTemplateId}}\",\n    \"legacy\": {\n        \"reviewType\": \"{{legacy_reviewType}}\",\n        \"forumId\": \"{{legacy_forumId}}\",\n        \"directProjectId\": \"{{legacy_directProjectId}}\",\n        \"screeningScorecardId\": \"{{legacy_screeningScorecardId}}\",\n        \"reviewScorecardId\": \"{{legacy_reviewScorecardId}}\",\n        \"isTask\": {{legacy_isTask}},\n        \"useSchedulingAPI\": {{legacy_useSchedulingAPI}},\n        \"pureV5Task\": {{legacy_pureV5Task}}\n    },\n    \"task\": {\n        \"isTask\": {{task_isTask}},\n        \"isAssigned\": {{task_isAssigned}}\n    },\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"privateDescription\": \"{{privateDescription}}\",\n    \"descriptionFormat\": \"{{descriptionFormat}}\",\n    \"metadata\": {{metadata}},\n    \"phases\": {{phases}},\n    \"events\": {{events}},\n    \"discussions\": {{discussions}},\n    \"prizeSets\": {{prizeSets}},\n    \"tags\": {{tags}},\n    \"legacyId\": {{legacyId}},\n    \"startDate\": \"{{startDate}}\",\n    \"status\": \"{{status}}\",    \n    \"groups\": {{groups}},\n    \"terms\": {{terms}}\n    \n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challenge by missing field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"trackId\": \"{{trackId}}\",\n    \"name\": \"{{name}}\",\n    \"projectId\": {{projectId}},\n    \"status\": \"{{status}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challenge by missing field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"typeId\": \"{{typeId}}\",\n    \"name\": \"{{name}}\",\n    \"projectId\": {{projectId}},\n    \"status\": \"{{status}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challenge by missing field 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"typeId\": \"{{typeId}}\",\n    \"trackId\": \"{{trackId}}\",\n    \"projectId\": {{projectId}},\n    \"status\": \"{{status}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challenge by missing field 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"typeId\": \"{{typeId}}\",\n    \"trackId\": \"{{trackId}}\",\n    \"name\": \"{{name}}\",\n    \"status\": \"{{status}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challenge by missing field 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"typeId\": \"{{typeId}}\",\n    \"trackId\": \"{{trackId}}\",\n    \"name\": \"{{name}}\",\n    \"projectId\": {{projectId}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "create challenge by unexpected field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"typeId\": \"{{typeId}}\",\n    \"trackId\": \"{{trackId}}\",\n    \"name\": \"{{name}}\",\n    \"projectId\": {{projectId}},\n    \"status\": \"{{status}}\",\n    \"other\": \"{{other}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get challenge",
					"item": [
						{
							"name": "get challenge - id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response).to.have.property('created')",
											"    pm.expect(response.createdBy).to.eq(iterationData.get('createdBy'))",
											"    pm.expect(response).to.have.property('updated')",
											"    pm.expect(response.updatedBy).to.eq(iterationData.get('updatedBy'))",
											"    pm.expect(response.projectId).to.eq(iterationData.get('projectId'))",
											"    pm.expect(response.typeId).to.eq(pm.environment.get(\"CHALLENGE_TYPE_ID_2\"))",
											"    pm.expect(response.trackId).to.eq(pm.environment.get(\"CHALLENGE_TRACK_ID_2\"))",
											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
											"    pm.expect(response.status).to.eq(iterationData.get('status'))",
											"    pm.expect(response.startDate).to.eq(response.phases[0].scheduledStartDate)",
											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
											"    pm.expect(response.task.isTask).to.eq(iterationData.get('isTask'))",
											"    pm.expect(response.task.isAssigned).to.eq(iterationData.get('isAssigned'))",
											"    pm.expect(response.task.isTask).to.eq(iterationData.get('isTask'))",
											"    pm.expect(response.task.memberId).to.be.null",
											"    pm.expect(response.groups).to.deep.eq(iterationData.get('groups'))",
											"    pm.expect(response.timelineTemplateId).to.eq(pm.environment.get(\"TIMELINE_TEMPLATE_ID_3\"))",
											"    pm.expect(response.phases[0].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_3\"))",
											"    pm.expect(response.phases[0].duration).to.eq(iterationData.get('phases')[0].duration)",
											"    pm.expect(response.phases[0].name).to.eq(iterationData.get('phases')[0].name)",
											"    pm.expect(response.phases[0].isOpen).to.eq(iterationData.get('phases')[0].isOpen)",
											"    pm.expect(response.phases[0]).to.have.property('scheduledStartDate')",
											"    pm.expect(response.phases[0]).to.have.property('scheduledEndDate')",
											"    pm.expect(response.phases[0]).to.have.property('actualStartDate')",
											"    pm.expect(response.phases[0]).to.have.property('actualEndDate')",
											"    pm.expect(response.phases[1].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_4\"))",
											"    pm.expect(response.phases[1].duration).to.eq(iterationData.get('phases')[1].duration)",
											"    pm.expect(response.phases[1].name).to.eq(iterationData.get('phases')[1].name)",
											"    pm.expect(response.phases[1].isOpen).to.eq(iterationData.get('phases')[1].isOpen)",
											"    pm.expect(response.phases[1].predecessor).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_3\"))",
											"    pm.expect(response.phases[1]).to.have.property('scheduledStartDate')",
											"    pm.expect(response.phases[1]).to.have.property('scheduledEndDate')",
											"    pm.expect(response.phases[1]).to.have.property('actualStartDate')",
											"    pm.expect(response.phases[1]).to.have.property('actualEndDate')",
											"    pm.expect(response.phases[2].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_5\"))",
											"    pm.expect(response.phases[2].duration).to.eq(iterationData.get('phases')[2].duration)",
											"    pm.expect(response.phases[2].name).to.eq(iterationData.get('phases')[2].name)",
											"    pm.expect(response.phases[2].isOpen).to.eq(iterationData.get('phases')[2].isOpen)",
											"    pm.expect(response.phases[2].predecessor).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_4\"))",
											"    pm.expect(response.phases[2]).to.have.property('scheduledStartDate')",
											"    pm.expect(response.phases[2]).to.have.property('scheduledEndDate')",
											"    pm.expect(response.phases[2]).to.have.property('actualStartDate')",
											"    pm.expect(response.phases[2]).to.have.property('actualEndDate')",
											"    pm.expect(response.phases[3].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_6\"))",
											"    pm.expect(response.phases[3].duration).to.eq(iterationData.get('phases')[3].duration)",
											"    pm.expect(response.phases[3].name).to.eq(iterationData.get('phases')[3].name)",
											"    pm.expect(response.phases[3].isOpen).to.eq(iterationData.get('phases')[3].isOpen)",
											"    pm.expect(response.phases[3].predecessor).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_5\"))",
											"    pm.expect(response.phases[3]).to.have.property('scheduledStartDate')",
											"    pm.expect(response.phases[3]).to.have.property('scheduledEndDate')",
											"    pm.expect(response.phases[3]).to.have.property('actualStartDate')",
											"    pm.expect(response.phases[3]).to.have.property('actualEndDate')",
											"    pm.expect(response.terms).to.deep.eq(iterationData.get('terms'))",
											"    pm.expect(response.descriptionFormat).to.eq(iterationData.get('descriptionFormat'))",
											"    pm.expect(response.endDate).to.eq(response.phases[0].scheduledEndDate)",
											"    pm.expect(response.numOfSubmissions).to.eq(iterationData.get('numOfSubmissions'))",
											"    pm.expect(response.numOfRegistrants).to.eq(iterationData.get('numOfRegistrants'))",
											"    pm.expect(response.currentPhaseNames).to.deep.eq(iterationData.get('currentPhaseNames'))",
											"    pm.expect(response.registrationStartDate).to.eq(response.phases[0].scheduledStartDate)",
											"    pm.expect(response.registrationEndDate).to.eq(response.phases[0].scheduledEndDate)",
											"    pm.expect(response.submissionStartDate).to.eq(response.phases[1].scheduledStartDate)",
											"    pm.expect(response.submissionEndDate).to.eq(response.phases[1].scheduledEndDate)",
											"    pm.expect(response.track).to.eq(iterationData.get('track'))",
											"    pm.expect(response.type).to.eq(iterationData.get('type'))        ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge - all",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.eq(iterationData.get('length'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenges",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge - id forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID_3}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID_3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get challenge by invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenges/{{testId}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{testId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "search challenges",
					"item": [
						{
							"name": "search challenge successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response).to.be.not.empty",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenges?{{paramKey}}={{paramValue}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "{{paramKey}}",
											"value": "{{paramValue}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search challenge by invalid parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenges?{{paramKey}}={{paramValue}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges"
									],
									"query": [
										{
											"key": "{{paramKey}}",
											"value": "{{paramValue}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "fully update challenge",
					"item": [
						{
							"name": "fully update challenge successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response).to.have.property('created')",
											"    pm.expect(response.createdBy).to.eq(iterationData.get('createdBy'))",
											"    pm.expect(response).to.have.property('updated')",
											"    pm.expect(response.updatedBy).to.eq(iterationData.get('updatedBy'))",
											"    pm.expect(response.projectId).to.eq(iterationData.get('projectId'))",
											"    pm.expect(response.typeId).to.eq(pm.environment.get(\"CHALLENGE_TYPE_ID_2\"))",
											"    pm.expect(response.trackId).to.eq(pm.environment.get(\"CHALLENGE_TRACK_ID_2\"))",
											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
											"    pm.expect(response.status).to.eq(iterationData.get('status'))",
											"    pm.expect(response.startDate).to.eq(response.phases[0].scheduledStartDate)",
											"    pm.expect(response.task.isTask).to.eq(iterationData.get('isTask'))",
											"    pm.expect(response.task.isAssigned).to.eq(iterationData.get('isAssigned'))",
											"    pm.expect(response.task.isTask).to.eq(iterationData.get('isTask'))",
											"    pm.expect(response.task.memberId).to.be.null",
											"    pm.expect(response.timelineTemplateId).to.eq(pm.environment.get(\"TIMELINE_TEMPLATE_ID_3\"))",
											"    pm.expect(response.phases[0].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_3\"))",
											"    pm.expect(response.phases[0].duration).to.eq(iterationData.get('phases')[0].duration)",
											"    pm.expect(response.phases[0].name).to.eq(iterationData.get('phases')[0].name)",
											"    pm.expect(response.phases[0].isOpen).to.eq(iterationData.get('phases')[0].isOpen)",
											"    pm.expect(response.phases[0]).to.have.property('scheduledStartDate')",
											"    pm.expect(response.phases[0]).to.have.property('scheduledEndDate')",
											"    pm.expect(response.phases[0]).to.have.property('actualStartDate')",
											"    pm.expect(response.phases[0]).to.have.property('actualEndDate')",
											"    pm.expect(response.phases[1].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_4\"))",
											"    pm.expect(response.phases[1].duration).to.eq(iterationData.get('phases')[1].duration)",
											"    pm.expect(response.phases[1].name).to.eq(iterationData.get('phases')[1].name)",
											"    pm.expect(response.phases[1].isOpen).to.eq(iterationData.get('phases')[1].isOpen)",
											"    pm.expect(response.phases[1].predecessor).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_3\"))",
											"    pm.expect(response.phases[1]).to.have.property('scheduledStartDate')",
											"    pm.expect(response.phases[1]).to.have.property('scheduledEndDate')",
											"    pm.expect(response.phases[1]).to.have.property('actualStartDate')",
											"    pm.expect(response.phases[1]).to.have.property('actualEndDate')",
											"    pm.expect(response.phases[2].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_5\"))",
											"    pm.expect(response.phases[2].duration).to.eq(iterationData.get('phases')[2].duration)",
											"    pm.expect(response.phases[2].name).to.eq(iterationData.get('phases')[2].name)",
											"    pm.expect(response.phases[2].isOpen).to.eq(iterationData.get('phases')[2].isOpen)",
											"    pm.expect(response.phases[2].predecessor).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_4\"))",
											"    pm.expect(response.phases[2]).to.have.property('scheduledStartDate')",
											"    pm.expect(response.phases[2]).to.have.property('scheduledEndDate')",
											"    pm.expect(response.phases[2]).to.have.property('actualStartDate')",
											"    pm.expect(response.phases[2]).to.have.property('actualEndDate')",
											"    pm.expect(response.phases[3].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_6\"))",
											"    pm.expect(response.phases[3].duration).to.eq(iterationData.get('phases')[3].duration)",
											"    pm.expect(response.phases[3].name).to.eq(iterationData.get('phases')[3].name)",
											"    pm.expect(response.phases[3].isOpen).to.eq(iterationData.get('phases')[3].isOpen)",
											"    pm.expect(response.phases[3].predecessor).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_5\"))",
											"    pm.expect(response.phases[3]).to.have.property('scheduledStartDate')",
											"    pm.expect(response.phases[3]).to.have.property('scheduledEndDate')",
											"    pm.expect(response.phases[3]).to.have.property('actualStartDate')",
											"    pm.expect(response.phases[3]).to.have.property('actualEndDate')",
											"    pm.expect(response.terms).to.deep.eq(iterationData.get('terms'))",
											"    pm.expect(response.descriptionFormat).to.eq(iterationData.get('descriptionFormat'))",
											"    pm.expect(response.endDate).to.eq(response.phases[0].scheduledEndDate)",
											"    pm.expect(response.currentPhaseNames).to.deep.eq(iterationData.get('currentPhaseNames'))",
											"    pm.expect(response.registrationStartDate).to.eq(response.phases[0].scheduledStartDate)",
											"    pm.expect(response.registrationEndDate).to.eq(response.phases[0].scheduledEndDate)",
											"    pm.expect(response.submissionStartDate).to.eq(response.phases[1].scheduledStartDate)",
											"    pm.expect(response.submissionEndDate).to.eq(response.phases[1].scheduledEndDate)",
											"    pm.expect(response.track).to.eq(iterationData.get('track'))",
											"    pm.expect(response.type).to.eq(iterationData.get('type'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"projectId\": \"{{projectId}}\",\n    \"name\": \"{{name}}\",\n    \"status\": \"{{status}}\",\n    \"startDate\": \"{{startDate}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challenge by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challenge by invalid bearer format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "invalid {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challenge by invalid Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"typeId\": \"{{typeId}}\",\n    \"trackId\": \"{{trackId}}\",\n    \"projectId\": {{projectId}},\n    \"status\": \"{{status}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{testId}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{testId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challenge by error field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"projectId\": \"{{projectId}}\",\n    \"typeId\": \"{{CHALLENGE_TYPE_ID}}\",\n    \"trackId\": \"{{CHALLENGE_TRACK_ID_3}}\",\n    \"timelineTemplateId\": \"{{TIMELINE_TEMPLATE_ID_3}}\",\n    \"name\": \"{{name}}\",\n    \"status\": \"{{status}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"tags\": {{tags}},\n    \"groups\": {{groups}},\n    \"terms\": {{terms}},\n    \"prizeSets\": {{prizeSets}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challenge by error field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"projectId\": \"{{projectId}}\",\n    \"typeId\": \"{{typeId}}\",\n    \"trackId\": \"{{CHALLENGE_TRACK_ID_3}}\",\n    \"timelineTemplateId\": \"{{TIMELINE_TEMPLATE_ID_3}}\",\n    \"name\": \"{{name}}\",\n    \"status\": \"{{status}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"tags\": {{tags}},\n    \"groups\": {{groups}},\n    \"terms\": {{terms}},\n    \"prizeSets\": {{prizeSets}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID_3}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID_3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challenge by error field 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"projectId\": \"{{projectId}}\",\n    \"typeId\": \"{{CHALLENGE_TYPE_ID}}\",\n    \"trackId\": \"{{trackId}}\",\n    \"timelineTemplateId\": \"{{TIMELINE_TEMPLATE_ID_3}}\",\n    \"name\": \"{{name}}\",\n    \"status\": \"{{status}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"tags\": {{tags}},\n    \"groups\": {{groups}},\n    \"terms\": {{terms}},\n    \"prizeSets\": {{prizeSets}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challenge by error field 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"projectId\": \"{{projectId}}\",\n    \"timelineTemplateId\": \"{{timelineTemplateId}}\",\n    \"name\": \"{{name}}\",\n    \"status\": \"{{status}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"tags\": {{tags}},\n    \"groups\": {{groups}},\n    \"terms\": {{terms}},\n    \"prizeSets\": {{prizeSets}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challenge by error field 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message').toString().replace('#ID',pm.environment.get('TIMELINE_TEMPLATE_ID_2')))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"projectId\": \"{{projectId}}\",\n    \"timelineTemplateId\": \"{{TIMELINE_TEMPLATE_ID_2}}\",\n    \"name\": \"{{name}}\",\n    \"status\": \"{{status}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"tags\": {{tags}},\n    \"groups\": {{groups}},\n    \"terms\": {{terms}},\n    \"prizeSets\": {{prizeSets}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challenge by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"projectId\": \"{{projectId}}\",\n    \"typeId\": \"{{typeId}}\",\n    \"trackId\": \"{{trackId}}\",\n    \"timelineTemplateId\": \"{{timelineTemplateId}}\",\n    \"legacy\": {\n        \"reviewType\": \"{{legacy_reviewType}}\",\n        \"forumId\": \"{{legacy_forumId}}\",\n        \"directProjectId\": \"{{legacy_directProjectId}}\",\n        \"screeningScorecardId\": \"{{legacy_screeningScorecardId}}\",\n        \"reviewScorecardId\": \"{{legacy_reviewScorecardId}}\",\n        \"isTask\": {{legacy_isTask}},\n        \"useSchedulingAPI\": {{legacy_useSchedulingAPI}},\n        \"pureV5Task\": {{legacy_pureV5Task}}\n    },\n    \"task\": {\n        \"isTask\": {{task_isTask}},\n        \"isAssigned\": {{task_isAssigned}}\n    },\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"privateDescription\": \"{{privateDescription}}\",\n    \"descriptionFormat\": \"{{descriptionFormat}}\",\n    \"metadata\": {{metadata}},\n    \"phases\": {{phases}},\n    \"events\": {{events}},\n    \"discussions\": {{discussions}},\n    \"prizeSets\": {{prizeSets}},\n    \"tags\": {{tags}},\n    \"legacyId\": {{legacyId}},\n    \"startDate\": \"{{startDate}}\",\n    \"status\": \"{{status}}\",    \n    \"groups\": {{groups}},\n    \"terms\": {{terms}}\n    \n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challenge by missing field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"typeId\": \"{{typeId}}\",\n    \"trackId\": \"{{trackId}}\",\n    \"projectId\": {{projectId}},\n    \"status\": \"{{status}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challenge by missing field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"typeId\": \"{{typeId}}\",\n    \"trackId\": \"{{trackId}}\",\n    \"name\": \"{{name}}\",\n    \"status\": \"{{status}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update challenge by missing field 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"typeId\": \"{{typeId}}\",\n    \"trackId\": \"{{trackId}}\",\n    \"name\": \"{{name}}\",\n    \"projectId\": {{projectId}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "partially update challenge",
					"item": [
						{
							"name": "partially update challenge successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response).to.have.property('created')",
											"    pm.expect(response.createdBy).to.eq(iterationData.get('createdBy'))",
											"    pm.expect(response).to.have.property('updated')",
											"    pm.expect(response.updatedBy).to.eq(iterationData.get('updatedBy'))",
											"    pm.expect(response.projectId).to.eq(iterationData.get('projectId'))",
											"    pm.expect(response.typeId).to.eq(pm.environment.get(\"CHALLENGE_TYPE_ID_2\"))",
											"    pm.expect(response.trackId).to.eq(pm.environment.get(\"CHALLENGE_TRACK_ID_2\"))",
											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
											"    pm.expect(response.status).to.eq(iterationData.get('status'))",
											"    pm.expect(response.startDate).to.eq(response.phases[0].scheduledStartDate)",
											"    pm.expect(response.task.isTask).to.eq(iterationData.get('isTask'))",
											"    pm.expect(response.task.isAssigned).to.eq(iterationData.get('isAssigned'))",
											"    pm.expect(response.task.isTask).to.eq(iterationData.get('isTask'))",
											"    pm.expect(response.task.memberId).to.be.null",
											"    pm.expect(response.timelineTemplateId).to.eq(pm.environment.get(\"TIMELINE_TEMPLATE_ID_3\"))",
											"    pm.expect(response.phases[0].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_3\"))",
											"    pm.expect(response.phases[0].duration).to.eq(iterationData.get('phases')[0].duration)",
											"    pm.expect(response.phases[0].name).to.eq(iterationData.get('phases')[0].name)",
											"    pm.expect(response.phases[0].isOpen).to.eq(iterationData.get('phases')[0].isOpen)",
											"    pm.expect(response.phases[0]).to.have.property('scheduledStartDate')",
											"    pm.expect(response.phases[0]).to.have.property('scheduledEndDate')",
											"    pm.expect(response.phases[0]).to.have.property('actualStartDate')",
											"    pm.expect(response.phases[0]).to.have.property('actualEndDate')",
											"    pm.expect(response.phases[1].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_4\"))",
											"    pm.expect(response.phases[1].duration).to.eq(iterationData.get('phases')[1].duration)",
											"    pm.expect(response.phases[1].name).to.eq(iterationData.get('phases')[1].name)",
											"    pm.expect(response.phases[1].isOpen).to.eq(iterationData.get('phases')[1].isOpen)",
											"    pm.expect(response.phases[1].predecessor).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_3\"))",
											"    pm.expect(response.phases[1]).to.have.property('scheduledStartDate')",
											"    pm.expect(response.phases[1]).to.have.property('scheduledEndDate')",
											"    pm.expect(response.phases[1]).to.have.property('actualStartDate')",
											"    pm.expect(response.phases[1]).to.have.property('actualEndDate')",
											"    pm.expect(response.phases[2].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_5\"))",
											"    pm.expect(response.phases[2].duration).to.eq(iterationData.get('phases')[2].duration)",
											"    pm.expect(response.phases[2].name).to.eq(iterationData.get('phases')[2].name)",
											"    pm.expect(response.phases[2].isOpen).to.eq(iterationData.get('phases')[2].isOpen)",
											"    pm.expect(response.phases[2].predecessor).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_4\"))",
											"    pm.expect(response.phases[2]).to.have.property('scheduledStartDate')",
											"    pm.expect(response.phases[2]).to.have.property('scheduledEndDate')",
											"    pm.expect(response.phases[2]).to.have.property('actualStartDate')",
											"    pm.expect(response.phases[2]).to.have.property('actualEndDate')",
											"    pm.expect(response.phases[3].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_6\"))",
											"    pm.expect(response.phases[3].duration).to.eq(iterationData.get('phases')[3].duration)",
											"    pm.expect(response.phases[3].name).to.eq(iterationData.get('phases')[3].name)",
											"    pm.expect(response.phases[3].isOpen).to.eq(iterationData.get('phases')[3].isOpen)",
											"    pm.expect(response.phases[3].predecessor).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_5\"))",
											"    pm.expect(response.phases[3]).to.have.property('scheduledStartDate')",
											"    pm.expect(response.phases[3]).to.have.property('scheduledEndDate')",
											"    pm.expect(response.phases[3]).to.have.property('actualStartDate')",
											"    pm.expect(response.phases[3]).to.have.property('actualEndDate')",
											"    pm.expect(response.terms).to.deep.eq(iterationData.get('terms'))",
											"    pm.expect(response.descriptionFormat).to.eq(iterationData.get('descriptionFormat'))",
											"    pm.expect(response.endDate).to.eq(response.phases[0].scheduledEndDate)",
											"    pm.expect(response.currentPhaseNames).to.deep.eq(iterationData.get('currentPhaseNames'))",
											"    pm.expect(response.registrationStartDate).to.eq(response.phases[0].scheduledStartDate)",
											"    pm.expect(response.registrationEndDate).to.eq(response.phases[0].scheduledEndDate)",
											"    pm.expect(response.submissionStartDate).to.eq(response.phases[1].scheduledStartDate)",
											"    pm.expect(response.submissionEndDate).to.eq(response.phases[1].scheduledEndDate)",
											"    pm.expect(response.track).to.eq(iterationData.get('track'))",
											"    pm.expect(response.type).to.eq(iterationData.get('type'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"projectId\": \"{{projectId}}\",\n    \"name\": \"{{name}}\",\n    \"status\": \"{{status}}\",\n    \"startDate\": \"{{startDate}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challenge by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challenge by invalid bearer format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "invalid {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challenge by invalid Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"typeId\": \"{{typeId}}\",\n    \"trackId\": \"{{trackId}}\",\n    \"projectId\": {{projectId}},\n    \"status\": \"{{status}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{testId}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{testId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challenge by error field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"{{status}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challenge by error field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"projectId\": \"{{projectId}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challenge by error field 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tags\": {{tags}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challenge by error field 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"groups\": {{groups}}\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challenge by error field 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"trackId\": \"{{CHALLENGE_TRACK_ID_3}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challenge by error field 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"typeId\": \"{{typeId}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID_3}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID_3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challenge by error field 7",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"trackId\": \"{{trackId}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challenge by error field 8",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"timelineTemplateId\": \"{{timelineTemplateId}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challenge by error field 9",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message').toString().replace('#ID',pm.environment.get('TIMELINE_TEMPLATE_ID_2')))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"timelineTemplateId\": \"{{TIMELINE_TEMPLATE_ID_2}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update challenge by invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"projectId\": \"{{projectId}}\",\n    \"typeId\": \"{{typeId}}\",\n    \"trackId\": \"{{trackId}}\",\n    \"timelineTemplateId\": \"{{timelineTemplateId}}\",\n    \"legacy\": {\n        \"reviewType\": \"{{legacy_reviewType}}\",\n        \"forumId\": \"{{legacy_forumId}}\",\n        \"directProjectId\": \"{{legacy_directProjectId}}\",\n        \"screeningScorecardId\": \"{{legacy_screeningScorecardId}}\",\n        \"reviewScorecardId\": \"{{legacy_reviewScorecardId}}\",\n        \"isTask\": {{legacy_isTask}},\n        \"useSchedulingAPI\": {{legacy_useSchedulingAPI}},\n        \"pureV5Task\": {{legacy_pureV5Task}}\n    },\n    \"task\": {\n        \"isTask\": {{task_isTask}},\n        \"isAssigned\": {{task_isAssigned}}\n    },\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"privateDescription\": \"{{privateDescription}}\",\n    \"descriptionFormat\": \"{{descriptionFormat}}\",\n    \"metadata\": {{metadata}},\n    \"phases\": {{phases}},\n    \"events\": {{events}},\n    \"discussions\": {{discussions}},\n    \"prizeSets\": {{prizeSets}},\n    \"tags\": {{tags}},\n    \"legacyId\": {{legacyId}},\n    \"startDate\": \"{{startDate}}\",\n    \"status\": \"{{status}}\",    \n    \"groups\": {{groups}},\n    \"terms\": {{terms}}\n    \n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete challenge",
					"item": [
						{
							"name": "delete challenge - id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response).to.have.property('created')",
											"    pm.expect(response.createdBy).to.eq(iterationData.get('createdBy'))",
											"    pm.expect(response).to.have.property('updated')",
											"    pm.expect(response.updatedBy).to.eq(iterationData.get('updatedBy'))",
											"    pm.expect(response.projectId).to.eq(iterationData.get('projectId'))",
											"    pm.expect(response.typeId).to.eq(pm.environment.get(\"CHALLENGE_TYPE_ID\"))",
											"    pm.expect(response.trackId).to.eq(pm.environment.get(\"CHALLENGE_TRACK_ID_3\"))",
											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
											"    pm.expect(response.status).to.eq(iterationData.get('status'))",
											"    pm.expect(response.startDate).to.eq(response.phases[0].scheduledStartDate)",
											"    pm.expect(response.timelineTemplateId).to.eq(pm.environment.get(\"TIMELINE_TEMPLATE_ID_3\"))",
											"    pm.expect(response.phases[0].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_3\"))",
											"    pm.expect(response.phases[0].duration).to.eq(iterationData.get('phases')[0].duration)",
											"    pm.expect(response.phases[0].name).to.eq(iterationData.get('phases')[0].name)",
											"    pm.expect(response.phases[0].isOpen).to.eq(iterationData.get('phases')[0].isOpen)",
											"    pm.expect(response.phases[0]).to.have.property('scheduledStartDate')",
											"    pm.expect(response.phases[0]).to.have.property('scheduledEndDate')",
											"    pm.expect(response.phases[0]).to.have.property('actualStartDate')",
											"    pm.expect(response.phases[0]).to.have.property('actualEndDate')",
											"    pm.expect(response.phases[1].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_4\"))",
											"    pm.expect(response.phases[1].duration).to.eq(iterationData.get('phases')[1].duration)",
											"    pm.expect(response.phases[1].name).to.eq(iterationData.get('phases')[1].name)",
											"    pm.expect(response.phases[1].isOpen).to.eq(iterationData.get('phases')[1].isOpen)",
											"    pm.expect(response.phases[1].predecessor).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_3\"))",
											"    pm.expect(response.phases[1]).to.have.property('scheduledStartDate')",
											"    pm.expect(response.phases[1]).to.have.property('scheduledEndDate')",
											"    pm.expect(response.phases[1]).to.have.property('actualStartDate')",
											"    pm.expect(response.phases[1]).to.have.property('actualEndDate')",
											"    pm.expect(response.phases[2].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_5\"))",
											"    pm.expect(response.phases[2].duration).to.eq(iterationData.get('phases')[2].duration)",
											"    pm.expect(response.phases[2].name).to.eq(iterationData.get('phases')[2].name)",
											"    pm.expect(response.phases[2].isOpen).to.eq(iterationData.get('phases')[2].isOpen)",
											"    pm.expect(response.phases[2].predecessor).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_4\"))",
											"    pm.expect(response.phases[2]).to.have.property('scheduledStartDate')",
											"    pm.expect(response.phases[2]).to.have.property('scheduledEndDate')",
											"    pm.expect(response.phases[2]).to.have.property('actualStartDate')",
											"    pm.expect(response.phases[2]).to.have.property('actualEndDate')",
											"    pm.expect(response.phases[3].phaseId).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_6\"))",
											"    pm.expect(response.phases[3].duration).to.eq(iterationData.get('phases')[3].duration)",
											"    pm.expect(response.phases[3].name).to.eq(iterationData.get('phases')[3].name)",
											"    pm.expect(response.phases[3].isOpen).to.eq(iterationData.get('phases')[3].isOpen)",
											"    pm.expect(response.phases[3].predecessor).to.eq(pm.environment.get(\"CHALLENGE_PHASE_ID_5\"))",
											"    pm.expect(response.phases[3]).to.have.property('scheduledStartDate')",
											"    pm.expect(response.phases[3]).to.have.property('scheduledEndDate')",
											"    pm.expect(response.phases[3]).to.have.property('actualStartDate')",
											"    pm.expect(response.phases[3]).to.have.property('actualEndDate')",
											"    pm.expect(response.descriptionFormat).to.eq(iterationData.get('descriptionFormat'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID_4}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID_4}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete challenge by invalid Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenges/{{testId}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{testId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete challenge by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete challenge by invalid bearer format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "invalid {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete challenge error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Attachments",
			"item": [
				{
					"name": "create attachment",
					"item": [
						{
							"name": "create attachment by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(pm.response.status === \"Created\"){",
											"        const response = pm.response.json()",
											"        pm.expect(response[0].name).to.eq(iterationData.get('name'))",
											"        pm.expect(response[0].fileSize).to.eq(iterationData.get('fileSize'))",
											"        pm.expect(response[0].url).to.eq(iterationData.get('url'))",
											"        pm.expect(response[0].description).to.eq(iterationData.get('description'))",
											"        pm.environment.set(\"ATTACHMENT_ID\", response[0].id);",
											"        if(pm.info.iteration === 0) {",
											"          pm.environment.unset(\"ATTACHMENT_ID_2\")",
											"        }",
											"        if(!pm.environment.get(\"ATTACHMENT_ID_2\")) {",
											"            pm.environment.set(\"ATTACHMENT_ID_2\", response[0].id);",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{name}}\",\n  \"fileSize\": {{fileSize}},\n  \"url\": \"{{url}}\",\n  \"description\": \"{{description}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "create attachment by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "create attachment by invalid bearer format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "invalid {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "create attachment by invalid Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{name}}\",\n  \"fileSize\": {{fileSize}},\n  \"url\": \"{{url}}\",\n  \"description\": \"{{description}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{testId}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{testId}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "create attachment by error field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{name}}\",\n  \"fileSize\": {{fileSize}},\n  \"url\": \"{{url}}\",\n  \"description\": \"{{description}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "create attachment by invalid field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{name}}\",\n  \"fileSize\": {{fileSize}},\n  \"url\": \"{{url}}\",\n  \"description\": \"{{description}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "create attachment by invalid field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": null,\n  \"fileSize\": {{fileSize}},\n  \"url\": \"{{url}}\",\n  \"description\": \"{{description}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "create attachment by invalid field 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{name}}\",\n  \"fileSize\": {{fileSize}},\n  \"url\": null,\n  \"description\": \"{{description}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "create attachment by invalid field 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{name}}\",\n  \"fileSize\": {{fileSize}},\n  \"url\": \"{{url}}\",\n  \"description\": null\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "create attachment by missing field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"fileSize\": {{fileSize}},\n  \"url\": \"{{url}}\",\n  \"description\": \"{{description}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "create attachment by missing field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{name}}\",\n  \"fileSize\": {{fileSize}},\n  \"description\": \"{{description}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "create attachment by unexpected field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"fileSize\": {{fileSize}},\n    \"url\": \"{{url}}\",\n    \"description\": \"{{description}}\",\n    \"other\": \"{{other}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}",
										"attachments"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "get attachment",
					"item": [
						{
							"name": "get attachment - id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
											"    pm.expect(response.fileSize).to.eq(iterationData.get('fileSize'))",
											"    pm.expect(response.url).to.eq(iterationData.get('url'))",
											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}/attachments/{{ATTACHMENT_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}",
										"attachments",
										"{{ATTACHMENT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get attachment by invalid id 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenges/{{testId}}/attachments/{{ATTACHMENT_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{testId}}",
										"attachments",
										"{{ATTACHMENT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get attachment by invalid id 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}/attachments/{{testId}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}",
										"attachments",
										"{{testId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get attachment by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}/attachments/{{ATTACHMENT_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}",
										"attachments",
										"{{ATTACHMENT_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "download attachment",
					"item": [
						{
							"name": "download attachment - id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}/attachments/{{ATTACHMENT_ID}}/download",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}",
										"attachments",
										"{{ATTACHMENT_ID}}",
										"download"
									]
								}
							},
							"response": []
						},
						{
							"name": "download attachment by invalid id 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenges/{{testId}}/attachments/{{ATTACHMENT_ID}}/download",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{testId}}",
										"attachments",
										"{{ATTACHMENT_ID}}",
										"download"
									]
								}
							},
							"response": []
						},
						{
							"name": "download attachment by invalid id 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}/attachments/{{testId}}/download",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}",
										"attachments",
										"{{testId}}",
										"download"
									]
								}
							},
							"response": []
						},
						{
							"name": "download attachment by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}/attachments/{{ATTACHMENT_ID}}/download",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}",
										"attachments",
										"{{ATTACHMENT_ID}}",
										"download"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "fully update attachment",
					"item": [
						{
							"name": "fully update attachment by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
											"    pm.expect(response.fileSize).to.eq(iterationData.get('fileSize'))",
											"    pm.expect(response.url).to.eq(iterationData.get('url'))",
											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{name}}\",\n  \"fileSize\": {{fileSize}},\n  \"url\": \"{{url}}\",\n  \"description\": \"{{description}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}/attachments/{{ATTACHMENT_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}",
										"attachments",
										"{{ATTACHMENT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update attachment by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}/attachments/{{ATTACHMENT_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}",
										"attachments",
										"{{ATTACHMENT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update attachment by invalid bearer format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "invalid {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}/attachments/{{ATTACHMENT_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}",
										"attachments",
										"{{ATTACHMENT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update attachment by invalid Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{name}}\",\n  \"fileSize\": {{fileSize}},\n  \"url\": \"{{url}}\",\n  \"description\": \"{{description}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{testId}}/attachments/{{ATTACHMENT_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{testId}}",
										"attachments",
										"{{ATTACHMENT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update attachment by error field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{name}}\",\n  \"fileSize\": {{fileSize}},\n  \"url\": \"{{url}}\",\n  \"description\": \"{{description}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}/attachments/{{ATTACHMENT_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}",
										"attachments",
										"{{ATTACHMENT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update attachment by invalid field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{name}}\",\n  \"fileSize\": {{fileSize}},\n  \"url\": \"{{url}}\",\n  \"description\": \"{{description}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}/attachments/{{ATTACHMENT_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}",
										"attachments",
										"{{ATTACHMENT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update attachment by invalid field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": null,\n  \"fileSize\": {{fileSize}},\n  \"url\": \"{{url}}\",\n  \"description\": \"{{description}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}/attachments/{{ATTACHMENT_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}",
										"attachments",
										"{{ATTACHMENT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update attachment by invalid field 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{name}}\",\n  \"fileSize\": {{fileSize}},\n  \"url\": null,\n  \"description\": \"{{description}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}/attachments/{{ATTACHMENT_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}",
										"attachments",
										"{{ATTACHMENT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update attachment by invalid field 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{name}}\",\n  \"fileSize\": {{fileSize}},\n  \"url\": \"{{url}}\",\n  \"description\": null\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}/attachments/{{ATTACHMENT_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}",
										"attachments",
										"{{ATTACHMENT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update attachment by missing field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"fileSize\": {{fileSize}},\n  \"url\": \"{{url}}\",\n  \"description\": \"{{description}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}/attachments/{{ATTACHMENT_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}",
										"attachments",
										"{{ATTACHMENT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update attachment by missing field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{name}}\",\n  \"fileSize\": {{fileSize}},\n  \"description\": \"{{description}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}/attachments/{{ATTACHMENT_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}",
										"attachments",
										"{{ATTACHMENT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "fully update attachment by unexpected field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"fileSize\": {{fileSize}},\n    \"url\": \"{{url}}\",\n    \"description\": \"{{description}}\",\n    \"other\": \"{{other}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}/attachments/{{ATTACHMENT_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}",
										"attachments",
										"{{ATTACHMENT_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "partially update attachment",
					"item": [
						{
							"name": "partially update attachment by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
											"    pm.expect(response.fileSize).to.eq(iterationData.get('fileSize'))",
											"    pm.expect(response.url).to.eq(iterationData.get('url'))",
											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{name}}\",\n  \"description\": \"{{description}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}/attachments/{{ATTACHMENT_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}",
										"attachments",
										"{{ATTACHMENT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update attachment by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}/attachments/{{ATTACHMENT_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}",
										"attachments",
										"{{ATTACHMENT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update attachment by invalid bearer format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "invalid {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}/attachments/{{ATTACHMENT_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}",
										"attachments",
										"{{ATTACHMENT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update attachment by invalid Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{name}}\",\n  \"fileSize\": {{fileSize}},\n  \"url\": \"{{url}}\",\n  \"description\": \"{{description}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{testId}}/attachments/{{ATTACHMENT_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{testId}}",
										"attachments",
										"{{ATTACHMENT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update attachment by error field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{name}}\",\n  \"fileSize\": {{fileSize}},\n  \"url\": \"{{url}}\",\n  \"description\": \"{{description}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}/attachments/{{ATTACHMENT_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}",
										"attachments",
										"{{ATTACHMENT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update attachment by invalid field 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{name}}\",\n  \"fileSize\": {{fileSize}},\n  \"url\": \"{{url}}\",\n  \"description\": \"{{description}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}/attachments/{{ATTACHMENT_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}",
										"attachments",
										"{{ATTACHMENT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update attachment by invalid field 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": null,\n  \"fileSize\": {{fileSize}},\n  \"url\": \"{{url}}\",\n  \"description\": \"{{description}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}/attachments/{{ATTACHMENT_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}",
										"attachments",
										"{{ATTACHMENT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update attachment by invalid field 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{name}}\",\n  \"fileSize\": {{fileSize}},\n  \"url\": null,\n  \"description\": \"{{description}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}/attachments/{{ATTACHMENT_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}",
										"attachments",
										"{{ATTACHMENT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update attachment by invalid field 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{name}}\",\n  \"fileSize\": {{fileSize}},\n  \"url\": \"{{url}}\",\n  \"description\": null\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}/attachments/{{ATTACHMENT_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}",
										"attachments",
										"{{ATTACHMENT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "partially update attachment by unexpected field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"fileSize\": {{fileSize}},\n    \"url\": \"{{url}}\",\n    \"description\": \"{{description}}\",\n    \"other\": \"{{other}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}/attachments/{{ATTACHMENT_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}",
										"attachments",
										"{{ATTACHMENT_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "delete attachment",
					"item": [
						{
							"name": "delete attachment - id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.name).to.eq(iterationData.get('name'))",
											"    pm.expect(response.fileSize).to.eq(iterationData.get('fileSize'))",
											"    pm.expect(response.url).to.eq(iterationData.get('url'))",
											"    pm.expect(response.description).to.eq(iterationData.get('description'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}/attachments/{{ATTACHMENT_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}",
										"attachments",
										"{{ATTACHMENT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete attachment by invalid Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenges/{{testId}}/attachments/{{ATTACHMENT_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{testId}}",
										"attachments",
										"{{ATTACHMENT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete attachment by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}/attachments/{{ATTACHMENT_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}",
										"attachments",
										"{{ATTACHMENT_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete attachment by invalid bearer format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "invalid {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "{{URL}}/challenges/{{CHALLENGE_ID}}/attachments/{{ATTACHMENT_ID}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenges",
										"{{CHALLENGE_ID}}",
										"attachments",
										"{{ATTACHMENT_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "AuditLogs",
			"item": [
				{
					"name": "get auditLog",
					"item": [
						{
							"name": "get auditLog - all",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-audit-logs",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-audit-logs"
									]
								}
							},
							"response": []
						},
						{
							"name": "search auditLog",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-audit-logs?{{paramKey}}={{paramVal}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-audit-logs"
									],
									"query": [
										{
											"key": "{{paramKey}}",
											"value": "{{paramVal}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search auditLog invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-audit-logs?{{paramKey}}={{paramVal}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-audit-logs"
									],
									"query": [
										{
											"key": "{{paramKey}}",
											"value": "{{paramVal}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get auditLog by invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{URL}}/challenge-audit-logs",
									"host": [
										"{{URL}}"
									],
									"path": [
										"challenge-audit-logs"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Health",
			"item": [
				{
					"name": "check health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`Status code is 200`, function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json()",
									"    pm.expect(response.checksRun).to.be.a('number')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{URL}}/challenges/health",
							"host": [
								"{{URL}}"
							],
							"path": [
								"challenges",
								"health"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}